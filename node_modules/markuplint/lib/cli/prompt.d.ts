type SelectQuestion<T> = {
    readonly message: string;
    readonly choices: readonly {
        readonly name: string;
        readonly value: T;
    }[];
};
export declare function select<T>(question: SelectQuestion<T>): Promise<T>;
export declare function multiSelect<T>(question: SelectQuestion<T>): Promise<T[]>;
export declare function input<T extends string = string>(question: string, validation?: Readonly<RegExp>): Promise<T>;
export declare function confirm(question: string, options?: {
    readonly initial?: boolean;
}): Promise<boolean>;
export declare function confirmSequence<T extends string = string>(questions: readonly {
    readonly message: string;
    readonly name: T;
}[]): Promise<Record<T, boolean>>;
export {};
