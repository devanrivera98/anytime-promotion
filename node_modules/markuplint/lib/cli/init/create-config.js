"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = exports.langs = void 0;
const extRExp = {
    jsx: '\\.[jt]sx?$',
    vue: '\\.vue$',
    svelte: '\\.svelte$',
    astro: '\\.astro$',
    pug: '\\.pug$',
    php: '\\.php$',
    smarty: '\\.tpl$',
    erb: '\\.erb$',
    ejs: '\\.ejs$',
    mustache: '\\.(mustache|hbs)$',
    nunjucks: '\\.nunjucks$',
    liquid: '\\.liquid$',
};
exports.langs = {
    jsx: 'React (JSX)',
    vue: 'Vue',
    svelte: 'Svelte',
    astro: 'Astro',
    pug: 'Pug',
    php: 'PHP',
    smarty: 'Smarty',
    erb: 'eRuby',
    ejs: 'EJS',
    mustache: 'Mustache/Handlebars',
    nunjucks: 'Nunjucks',
    liquid: 'liquid (Shopify)',
};
function createConfig(langs, mode, defaultRules) {
    var _a;
    let config = {};
    const parser = { ...config.parser };
    for (const lang of langs) {
        const ext = extRExp[lang];
        if (!ext) {
            continue;
        }
        parser[ext] = `@markuplint/${lang}-parser`;
        if (lang === 'vue') {
            config = {
                ...config,
                specs: {
                    ...config.specs,
                    '\\.vue$': '@markuplint/vue-spec',
                },
            };
        }
        if (lang === 'jsx') {
            config = {
                ...config,
                specs: {
                    ...config.specs,
                    '\\.[jt]sx?$': '@markuplint/react-spec',
                },
            };
        }
    }
    if (Object.keys(parser).length > 0) {
        config.parser = parser;
    }
    const rules = { ...config.rules };
    if (Array.isArray(mode)) {
        const ruleNames = Object.keys(defaultRules);
        for (const ruleName of ruleNames) {
            const rule = defaultRules[ruleName];
            if (!rule) {
                continue;
            }
            if (mode.includes(rule.category)) {
                rules[ruleName] = rule.defaultValue;
            }
        }
    }
    else if (mode === 'recommended') {
        config.extends = [...((_a = config.extends) !== null && _a !== void 0 ? _a : []), 'markuplint:recommended'];
    }
    else {
        const ruleNames = Object.keys(defaultRules);
        for (const ruleName of ruleNames) {
            const rule = defaultRules[ruleName];
            if (!rule) {
                continue;
            }
            rules[ruleName] = rule.defaultValue;
        }
    }
    if (Object.keys(rules).length > 0) {
        config.rules = rules;
    }
    return config;
}
exports.createConfig = createConfig;
