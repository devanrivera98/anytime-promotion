"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultRules = void 0;
const tslib_1 = require("tslib");
const gray_matter_1 = tslib_1.__importDefault(require("gray-matter"));
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
const RULES_SCHEMA_URL = 'https://raw.githubusercontent.com/markuplint/markuplint/[VERSION]/packages/@markuplint/rules/schema.json';
const RULES_README_URL = 'https://raw.githubusercontent.com/markuplint/markuplint/[VERSION]/packages/@markuplint/rules/src/[NAME]/README.md';
async function getDefaultRules(version) {
    const json = await safeFetch(RULES_SCHEMA_URL, version);
    const rules = {};
    await Promise.all(Object.entries(json.definitions.rules.properties).map(async ([name, rule]) => {
        var _a, _b, _c, _d;
        const json = await safeFetch(rule.$ref.replace('/main/', '/[VERSION]/'), version);
        let severity = (_c = (_b = (_a = (Array.isArray(json.oneOf) ? json.oneOf : []).find((val) => val.properties)) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.severity) === null || _c === void 0 ? void 0 : _c.default;
        let category = json._category;
        if (severity == null || category == null) {
            const data = await getCatAndSeverityFromLegacy(version, name);
            severity = data.severity;
            category = data.category;
        }
        const defaultValue = severity === 'warning' ? false : (_d = json.definitions.value.default) !== null && _d !== void 0 ? _d : true;
        rules[name] = {
            defaultValue,
            category,
        };
    }));
    return rules;
}
exports.getDefaultRules = getDefaultRules;
async function safeFetch(baseUrl, version, type = 'json') {
    const url = baseUrl.replace('[VERSION]', `v${version}`);
    const res = await (0, node_fetch_1.default)(url);
    if (!res.ok) {
        return safeFetch(baseUrl, '3.0.0', type);
    }
    if (type === 'json') {
        return (await res.json());
    }
    const md = await res.text();
    const { data } = (0, gray_matter_1.default)(md);
    return data;
}
/**
 * Fallback fetching until 3.0.x
 *
 * @param version
 * @param name
 * @returns
 */
async function getCatAndSeverityFromLegacy(version, name) {
    const data = await safeFetch(RULES_README_URL.replace('[NAME]', name), version, 'md');
    return {
        category: data.category,
        severity: data.severity,
    };
}
