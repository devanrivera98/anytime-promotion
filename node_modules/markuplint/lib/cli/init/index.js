"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const util_1 = tslib_1.__importDefault(require("util"));
const util_2 = require("../../util");
const prompt_1 = require("../prompt");
const create_config_1 = require("./create-config");
const get_default_rules_1 = require("./get-default-rules");
const install_module_1 = require("./install-module");
const writeFile = util_1.default.promisify(fs_1.default.writeFile);
const ruleCategories = {
    validation: {
        message: 'Are you going to conformance check according to HTML standard?',
    },
    a11y: {
        message: 'Do you want high accessibility?',
    },
    'naming-convention': {
        message: 'Are you going to set the convention about naming?',
    },
    maintainability: {
        message: 'Do you want high maintainability?',
    },
    style: {
        message: 'Are you going to check for the code styles?',
    },
};
async function initialize() {
    (0, util_2.write)((0, util_2.head)('Initialization'));
    util_2.write.break();
    const selectedLangs = await (0, prompt_1.multiSelect)({
        message: 'Which do you use template engines?',
        choices: Object.entries(create_config_1.langs).map(([key, name]) => ({ name, value: key })),
    });
    const autoInstall = await (0, prompt_1.confirm)('May I install them automatically?');
    const customize = await (0, prompt_1.confirm)('Do you customize rules?');
    let ruleSettingMode = 'none';
    if (customize) {
        const categories = Object.keys(ruleCategories);
        const selectedCategories = await (0, prompt_1.confirmSequence)(categories.map(catName => {
            const cat = ruleCategories[catName];
            return {
                message: cat.message,
                name: catName,
            };
        }));
        ruleSettingMode = Object.entries(selectedCategories)
            .map(([name, enabled]) => (enabled ? name : ''))
            .filter((name) => !!name);
    }
    else if (await (0, prompt_1.confirm)('Does it import the recommended config?')) {
        ruleSettingMode = 'recommended';
    }
    let defaultRules = {};
    if (ruleSettingMode !== 'recommended') {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const rulesVersion = require('../../../package.json').version;
        defaultRules = await (0, get_default_rules_1.getDefaultRules)(rulesVersion);
    }
    const config = (0, create_config_1.createConfig)(selectedLangs, ruleSettingMode, defaultRules);
    const filePath = path_1.default.resolve(process.cwd(), '.markuplintrc');
    await writeFile(filePath, JSON.stringify(config, null, 2), { encoding: 'utf-8' });
    (0, util_2.write)(`✨Created: ${filePath}`);
    if (autoInstall) {
        (0, util_2.write)('Install automatically');
        const modules = (0, install_module_1.selectModules)(selectedLangs);
        const result = await (0, install_module_1.installModule)(modules, true).catch(e => new Error(e));
        if (result instanceof Error) {
            util_2.error.exit();
            return;
        }
        if (result.alreadyExists) {
            (0, util_2.write)('Modules are installed already.');
        }
        else {
            (0, util_2.write)('✨ Success');
        }
    }
}
exports.initialize = initialize;
