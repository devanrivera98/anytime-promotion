"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installModule = exports.selectModules = void 0;
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const cli_color_1 = tslib_1.__importDefault(require("cli-color"));
// @ts-ignore
const detect_installed_1 = tslib_1.__importDefault(require("detect-installed"));
const has_yarn_1 = tslib_1.__importDefault(require("has-yarn"));
function selectModules(selectedLangs) {
    const modules = ['markuplint', ...selectedLangs.map(lang => `@markuplint/${lang}-parser`)];
    if (selectedLangs.includes('vue')) {
        modules.push('@markuplint/vue-spec');
    }
    if (selectedLangs.includes('jsx')) {
        modules.push('@markuplint/react-spec');
    }
    return modules;
}
exports.selectModules = selectModules;
async function installModule(module, dev = false) {
    module = module.map(m => m.trim());
    const uninstallMods = [];
    try {
        for (const mod of module) {
            const installed = await isInstalled(mod);
            if (!installed) {
                uninstallMods.push(mod);
            }
        }
    }
    catch (_) {
        // void
    }
    if (uninstallMods.length === 0) {
        return {
            success: true,
            alreadyExists: true,
        };
    }
    const mod = (0, has_yarn_1.default)() ? 'yarn' : 'npm';
    const installOpt = (0, has_yarn_1.default)() ? 'add' : 'install';
    const opt = [installOpt];
    if (dev) {
        opt.push('-D');
    }
    if (!(0, has_yarn_1.default)()) {
        opt.push('--legacy-peer-deps');
    }
    opt.push(...uninstallMods);
    return new Promise((resolve, reject) => {
        process.stdout.write(cli_color_1.default.blackBright(`${mod} ${opt.join(' ')}\n`));
        const result = (0, child_process_1.spawnSync)(mod, opt, { stdio: 'inherit' });
        if (result.error || result.status !== 0) {
            const message = 'Error running command.';
            const error = new Error(message);
            error.stack = message;
            reject(error);
        }
        resolve({
            success: true,
            alreadyExists: false,
        });
    });
}
exports.installModule = installModule;
function isInstalled(module) {
    return new Promise((resolve, reject) => {
        try {
            (0, detect_installed_1.default)(module, {
                local: true,
            }).then((exists) => {
                resolve(exists);
            });
        }
        catch (err) {
            reject(err);
        }
    });
}
