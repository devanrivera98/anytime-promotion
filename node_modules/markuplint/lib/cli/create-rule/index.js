"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRule = void 0;
const tslib_1 = require("tslib");
const node_path_1 = require("node:path");
const create_rule_helper_1 = require("@markuplint/create-rule-helper");
const cli_color_1 = tslib_1.__importDefault(require("cli-color"));
const util_1 = require("../../util");
const install_module_1 = require("../init/install-module");
const prompt_1 = require("../prompt");
const icons = {
    README: '📝',
    index: '📜',
    schema: '⚙️ ',
    package: '🎁',
    tsconfig: '💎',
};
async function createRule() {
    var _a;
    (0, util_1.write)((0, util_1.head)('Create a rule'));
    util_1.write.break();
    const firstChoices = [
        { name: 'Add the rule to this project', value: 'ADD_TO_PROJECT' },
        { name: 'Create the rule and publish it as a package', value: 'PUBLISH_AS_PACKAGE' },
    ];
    if (await (0, create_rule_helper_1.isMarkuplintRepo)()) {
        firstChoices.push({ name: 'Contribute the new rule to markuplint core rules', value: 'CONTRIBUTE_TO_CORE' });
    }
    const purpose = await (0, prompt_1.select)({
        message: 'What purpose do you create the rule for?',
        choices: firstChoices,
    });
    const dirQuestion = purpose === 'ADD_TO_PROJECT' ? 'What is the directory name?' : 'What is the plugin name?';
    const pluginName = purpose === 'CONTRIBUTE_TO_CORE' ? '' : await (0, prompt_1.input)(dirQuestion, /^[a-z][a-z0-9]*(?:-[a-z][a-z0-9]*)*$/i);
    const ruleName = await (0, prompt_1.input)('What is the rule name?', /^[a-z][a-z0-9]*(?:-[a-z][a-z0-9]*)*$/i);
    const core = purpose === 'CONTRIBUTE_TO_CORE'
        ? {
            description: await (0, prompt_1.input)('Description:'),
            category: await (0, prompt_1.select)({
                message: 'Category:',
                choices: [
                    { name: 'Conformance checking', value: 'validation' },
                    { name: 'Accessibility', value: 'a11y' },
                    { name: 'Naming Convention', value: 'naming-convention' },
                    { name: 'Maintainability', value: 'maintainability' },
                    { name: 'Style', value: 'style' },
                ],
            }),
            severity: await (0, prompt_1.select)({
                message: 'Severity:',
                choices: [
                    { name: 'error', value: 'error' },
                    { name: 'warning', value: 'warning' },
                ],
            }),
        }
        : undefined;
    const lang = purpose === 'CONTRIBUTE_TO_CORE'
        ? 'TYPESCRIPT'
        : await (0, prompt_1.select)({
            message: 'Which language will you implement?',
            choices: [
                { name: 'TypeScript', value: 'TYPESCRIPT' },
                { name: 'JavaScript', value: 'JAVASCRIPT' },
            ],
        });
    const needTest = purpose === 'CONTRIBUTE_TO_CORE' ? true : await (0, prompt_1.confirm)('Do you need the test?', { initial: true });
    const result = await (0, create_rule_helper_1.createRuleHelper)({ purpose, pluginName, ruleName, lang, needTest, core });
    for (const file of result.files) {
        output(pluginName || 'core', file.test ? '🖍 ' : (_a = icons[file.name]) !== null && _a !== void 0 ? _a : '🛡 ', file.fileName, (0, node_path_1.resolve)(file.destDir, file.fileName + file.ext));
    }
    if (result.dependencies.length > 0) {
        await (0, install_module_1.installModule)(result.dependencies);
    }
    if (result.devDependencies.length > 0) {
        await (0, install_module_1.installModule)(result.devDependencies, true);
    }
}
exports.createRule = createRule;
function output(name, icon, title, path) {
    const _marker = cli_color_1.default.xterm(39)('✔') + ' ';
    const _title = (icon, title) => `${icon} ` + cli_color_1.default.bold(`${name}/${title}`);
    const _file = (path) => ' ' + cli_color_1.default.cyanBright(path);
    (0, util_1.write)(_marker + _title(icon, title) + _file(path));
}
