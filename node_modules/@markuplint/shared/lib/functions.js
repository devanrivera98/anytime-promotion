"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeHref = exports.decodeEntities = exports.nonNullableFilter = exports.noEmptyFilter = exports.toNonNullableArrayFromItemOrArray = exports.toNoEmptyStringArrayFromStringOrArray = void 0;
const html_entities_1 = require("html-entities");
/**
 * Converts a given value of string, string array, null, or undefined
 * into an array of non-empty strings.
 *
 * If a string is provided, it wraps it into an array. If null or undefined
 * is provided, an empty array is returned.
 *
 * @param value The input value to be converted to a non-empty string array.
 * @returns The resulting array of non-empty strings derived from the input value.
 */
function toNoEmptyStringArrayFromStringOrArray(value) {
    const array = typeof value === 'string' ? [value] : value !== null && value !== void 0 ? value : [];
    return array.filter(noEmptyFilter);
}
exports.toNoEmptyStringArrayFromStringOrArray = toNoEmptyStringArrayFromStringOrArray;
/**
 * Converts a given value of an item or an array of items into
 * an array of non-nullable items.
 *
 * @template T The type of the items in the input value.
 * @param value The input value to be converted to a non-nullable item array.
 * @returns The resulting array of non-nullable items derived from the input value.
 */
function toNonNullableArrayFromItemOrArray(value) {
    const array = Array.isArray(value) ? value : [value];
    // @ts-ignore
    return array.filter(nonNullableFilter);
}
exports.toNonNullableArrayFromItemOrArray = toNonNullableArrayFromItemOrArray;
/**
 * A filter function for use with the `Array.filter` method,
 * which determines if the given string item is non-empty.
 *
 * @param item The string item to be checked for non-emptiness.
 * @returns Returns true if the item is a non-empty string, otherwise false.
 */
function noEmptyFilter(item) {
    return item !== '';
}
exports.noEmptyFilter = noEmptyFilter;
/**
 * A filter function for use with the Array.filter method,
 * which determines if the given item is non-nullable.
 *
 * @template T The type of the items in the array.
 * @param item The item to be checked for non-nullability.
 * @returns Returns true if the item is non-nullable, otherwise false.
 */
function nonNullableFilter(item) {
    return item != null;
}
exports.nonNullableFilter = nonNullableFilter;
/**
 * Decodes the provided text by replacing HTML entities
 * with their corresponding characters.
 *
 * The decoding process uses the 'html5' (HTML Standard) level.
 *
 * Unknown entities are left as they are.
 *
 * @param text The input text containing HTML entities to be decoded.
 * @returns The decoded text with HTML entities replaced by their corresponding characters.
 */
function decodeEntities(text) {
    return (0, html_entities_1.decode)(text, { level: 'html5' });
}
exports.decodeEntities = decodeEntities;
/**
 * Decodes the provided URL string (href) using
 * the `decodeURIComponent` function.
 *
 * If a `URIError` is encountered,
 * the original href is returned. Any other errors are propagated.
 *
 * @param href The URL string to be decoded.
 * @returns The decoded URL string or the original href if a `URIError` occurs.
 */
function decodeHref(href) {
    try {
        return decodeURIComponent(href);
    }
    catch (e) {
        if (e instanceof URIError) {
            return href;
        }
        throw e;
    }
}
exports.decodeHref = decodeHref;
