"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigParserError = exports.TargetParserError = exports.ParserError = void 0;
class ParserError extends Error {
    constructor(message, info) {
        var _a, _b, _c;
        super(message);
        this.name = 'ParserError';
        this.line = (_a = info.line) !== null && _a !== void 0 ? _a : 1;
        this.col = (_b = info.col) !== null && _b !== void 0 ? _b : 0;
        this.raw = (_c = info.raw) !== null && _c !== void 0 ? _c : '';
    }
}
exports.ParserError = ParserError;
class TargetParserError extends ParserError {
    constructor(message, info) {
        var _a;
        const errMsg = info.nodeName
            ? `The ${info.nodeName} is invalid element (${info.line}:${info.col}): ${message}`
            : message;
        super(errMsg, info);
        this.name = 'TargetParserError';
        this.nodeName = (_a = info.nodeName) !== null && _a !== void 0 ? _a : null;
    }
}
exports.TargetParserError = TargetParserError;
class ConfigParserError extends ParserError {
    constructor(message, info) {
        const pos = info.line != null && info.line != null ? `(${info.line}:${info.col})` : '';
        const file = ` in ${info.filePath}${pos}`;
        const errMsg = `${message}${file}`;
        super(errMsg, info);
        this.name = 'ConfigParserError';
        this.filePath = info.filePath;
    }
}
exports.ConfigParserError = ConfigParserError;
