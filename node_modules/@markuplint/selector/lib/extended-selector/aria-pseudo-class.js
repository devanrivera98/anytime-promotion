"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ariaPseudoClass = void 0;
const ml_spec_1 = require("@markuplint/ml-spec");
/**
 * Version Syntax is not support yet.
 */
function ariaPseudoClass() {
    return (content) => (
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    el) => {
        const aria = ariaPseudoClassParser(content);
        const name = (0, ml_spec_1.getAccname)(el);
        switch (aria.type) {
            case 'hasName': {
                if (name) {
                    return {
                        specificity: [0, 1, 0],
                        matched: true,
                        nodes: [el],
                        has: [],
                    };
                }
                return {
                    specificity: [0, 1, 0],
                    matched: false,
                };
            }
            case 'hasNoName': {
                if (!name) {
                    return {
                        specificity: [0, 1, 0],
                        matched: true,
                        nodes: [el],
                        has: [],
                    };
                }
                return {
                    specificity: [0, 1, 0],
                    matched: false,
                };
            }
        }
    };
}
exports.ariaPseudoClass = ariaPseudoClass;
function ariaPseudoClassParser(syntax) {
    const [_query, _version] = syntax.split('|');
    const query = _query === null || _query === void 0 ? void 0 : _query.replace(/\s+/g, '').toLowerCase();
    const version = _version !== null && _version !== void 0 ? _version : ml_spec_1.ARIA_RECOMMENDED_VERSION;
    if (!(0, ml_spec_1.validateAriaVersion)(version)) {
        throw new SyntaxError(`Unsupported ARIA version: ${version}`);
    }
    switch (query) {
        case 'hasname': {
            return {
                type: 'hasName',
                version,
            };
        }
        case 'hasnoname': {
            return {
                type: 'hasNoName',
                version,
            };
        }
    }
    throw new SyntaxError(`Unsupported syntax: ${syntax}`);
}
