"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ariaRolePseudoClass = void 0;
const ml_spec_1 = require("@markuplint/ml-spec");
function ariaRolePseudoClass(specs) {
    return (content) => (
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    el) => {
        var _a, _b;
        const aria = ariaPseudoClassParser(content);
        const computed = (0, ml_spec_1.getComputedRole)(specs, el, (_a = aria.version) !== null && _a !== void 0 ? _a : ml_spec_1.ARIA_RECOMMENDED_VERSION);
        if (((_b = computed.role) === null || _b === void 0 ? void 0 : _b.name) === aria.role) {
            return {
                specificity: [0, 1, 0],
                matched: true,
                nodes: [el],
                has: [],
            };
        }
        return {
            specificity: [0, 1, 0],
            matched: false,
        };
    };
}
exports.ariaRolePseudoClass = ariaRolePseudoClass;
function ariaPseudoClassParser(syntax) {
    var _a;
    const [roleName, _version] = syntax.split('|');
    const version = _version !== null && _version !== void 0 ? _version : ml_spec_1.ARIA_RECOMMENDED_VERSION;
    if (!(0, ml_spec_1.validateAriaVersion)(version)) {
        throw new SyntaxError(`Unsupported ARIA version: ${version}`);
    }
    return {
        role: (_a = roleName === null || roleName === void 0 ? void 0 : roleName.trim().toLowerCase()) !== null && _a !== void 0 ? _a : syntax.trim().toLowerCase(),
        version,
    };
}
