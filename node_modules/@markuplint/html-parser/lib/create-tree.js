"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTree = void 0;
const tslib_1 = require("tslib");
const parser_utils_1 = require("@markuplint/parser-utils");
const parse5_1 = require("parse5");
const parse_raw_tag_1 = tslib_1.__importDefault(require("./parse-raw-tag"));
const P5_OPTIONS = {
    scriptingEnabled: false,
    sourceCodeLocationInfo: true,
};
function createTree(rawCode, isFragment, offsetOffset, offsetLine, offsetColumn) {
    const doc = isFragment ? (0, parse5_1.parseFragment)(rawCode, P5_OPTIONS) : (0, parse5_1.parse)(rawCode, P5_OPTIONS);
    return createTreeRecursive(doc, null, rawCode, offsetOffset, offsetLine, offsetColumn);
}
exports.createTree = createTree;
function createTreeRecursive(rootNode, 
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
parentNode, rawHtml, offsetOffset, offsetLine, offsetColumn) {
    const nodeList = [];
    const childNodes = getChildNodes(rootNode);
    let prevNode = null;
    for (const p5node of childNodes) {
        const node = nodeize(p5node, prevNode, parentNode, rawHtml, offsetOffset, offsetLine, offsetColumn);
        if (!node) {
            continue;
        }
        if (prevNode) {
            if (node.type !== 'endtag') {
                prevNode.nextNode = node;
            }
            node.prevNode = prevNode;
        }
        prevNode = node;
        nodeList.push(node);
    }
    return nodeList;
}
function nodeize(originNode, 
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
prevNode, 
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
parentNode, rawHtml, offsetOffset, offsetLine, offsetColumn) {
    var _a, _b, _c;
    const nextNode = null;
    const location = getLocation(originNode);
    if (!location) {
        const prevToken = prevNode !== null && prevNode !== void 0 ? prevNode : parentNode;
        const startOffset = prevToken ? prevToken.endOffset : 0;
        const endOffset = prevToken ? prevToken.endOffset : 0;
        const startLine = prevToken ? prevToken.endLine : 0;
        const endLine = prevToken ? prevToken.endLine : 0;
        const startCol = prevToken ? prevToken.endCol : 0;
        const endCol = prevToken ? prevToken.endCol : 0;
        const node = {
            uuid: (0, parser_utils_1.uuid)(),
            raw: '',
            startOffset: startOffset + offsetOffset,
            endOffset: endOffset + offsetOffset,
            startLine: startLine + offsetLine,
            endLine: endLine + offsetLine,
            startCol: startCol + (startLine === 1 ? offsetColumn : 0),
            endCol: endCol + (endLine === 1 ? offsetColumn : 0),
            nodeName: originNode.nodeName,
            type: 'starttag',
            namespace: getNamespace(originNode),
            elementType: 'html',
            attributes: [],
            hasSpreadAttr: false,
            pearNode: null,
            tagCloseChar: '',
            tagOpenChar: '',
            parentNode,
            prevNode,
            nextNode,
            isFragment: false,
            isGhost: true,
        };
        node.childNodes = createTreeRecursive(originNode, node, rawHtml, offsetOffset, offsetLine, offsetColumn);
        return node;
    }
    const { startOffset, endOffset, startLine, endLine, startCol, endCol } = location;
    const raw = rawHtml.slice(startOffset, endOffset !== null && endOffset !== void 0 ? endOffset : startOffset);
    switch (originNode.nodeName) {
        case '#documentType': {
            return {
                uuid: (0, parser_utils_1.uuid)(),
                raw,
                // @ts-ignore
                name: (_a = originNode.name) !== null && _a !== void 0 ? _a : '',
                // @ts-ignore
                publicId: (_b = originNode.publicId) !== null && _b !== void 0 ? _b : '',
                // @ts-ignore
                systemId: (_c = originNode.systemId) !== null && _c !== void 0 ? _c : '',
                startOffset: startOffset + offsetOffset,
                endOffset: endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                nodeName: '#doctype',
                type: 'doctype',
                parentNode,
                prevNode,
                _addPrevNode: 102,
                nextNode,
                isFragment: false,
                isGhost: false,
            };
        }
        case '#text': {
            const node = {
                uuid: (0, parser_utils_1.uuid)(),
                raw,
                startOffset: startOffset + offsetOffset,
                endOffset: endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                nodeName: '#text',
                type: 'text',
                parentNode,
                prevNode,
                nextNode,
                isFragment: false,
                isGhost: false,
            };
            return node;
        }
        case '#comment': {
            return {
                uuid: (0, parser_utils_1.uuid)(),
                raw,
                startOffset: startOffset + offsetOffset,
                endOffset: endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                nodeName: '#comment',
                type: 'comment',
                parentNode,
                prevNode,
                nextNode,
                isFragment: false,
                isGhost: false,
            };
        }
        default: {
            const tagLoc = 'startTag' in location ? location.startTag : null;
            const startTagRaw = tagLoc
                ? rawHtml.slice(tagLoc.startOffset, tagLoc.endOffset)
                : rawHtml.slice(startOffset, endOffset !== null && endOffset !== void 0 ? endOffset : startOffset);
            const tagTokens = (0, parse_raw_tag_1.default)(startTagRaw, startLine, startCol, startOffset, offsetOffset, offsetLine, offsetColumn);
            const tagName = tagTokens.tagName;
            let endTag = null;
            let endTagLoc = 'endTag' in location ? location.endTag : null;
            /**
             * Patch: Create endTag for SVG Element
             * @see https://github.com/inikulin/parse5/issues/352
             */
            if (!endTagLoc &&
                'namespaceURI' in originNode &&
                originNode.namespaceURI === 'http://www.w3.org/2000/svg') {
                const belowRawHTMLFromStartTagEnd = rawHtml.slice(location.endOffset);
                const endTagMatched = belowRawHTMLFromStartTagEnd.match(new RegExp(`^</\\s*${tagName}[^>]*>`, 'm'));
                const endTag = endTagMatched && endTagMatched[0];
                if (endTag) {
                    endTagLoc = (0, parser_utils_1.sliceFragment)(rawHtml, location.endOffset, location.endOffset + endTag.length);
                }
            }
            if (endTagLoc) {
                const { startOffset, endOffset, startLine, endLine, startCol, endCol } = endTagLoc;
                const endTagRaw = rawHtml.slice(startOffset, endOffset);
                const endTagTokens = (0, parse_raw_tag_1.default)(endTagRaw, startLine, startCol, startOffset, offsetOffset, offsetLine, offsetColumn);
                const endTagName = endTagTokens.tagName;
                endTag = {
                    uuid: (0, parser_utils_1.uuid)(),
                    raw: endTagRaw,
                    startOffset: startOffset + offsetOffset,
                    endOffset: endOffset + offsetOffset,
                    startLine: startLine + offsetLine,
                    endLine: endLine + offsetLine,
                    startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                    endCol: endCol + (endLine === 1 ? offsetColumn : 0),
                    nodeName: endTagName,
                    type: 'endtag',
                    namespace: getNamespace(originNode),
                    attributes: endTagTokens.attrs,
                    parentNode,
                    prevNode,
                    nextNode,
                    pearNode: null,
                    isFragment: false,
                    isGhost: false,
                    tagOpenChar: '</',
                    tagCloseChar: '>',
                };
            }
            const _endOffset = startOffset + startTagRaw.length;
            const _endLine = (0, parser_utils_1.getEndLine)(startTagRaw, startLine);
            const _endCol = (0, parser_utils_1.getEndCol)(startTagRaw, startCol);
            const startTag = {
                uuid: (0, parser_utils_1.uuid)(),
                raw: startTagRaw,
                startOffset: startOffset + offsetOffset,
                endOffset: _endOffset + offsetOffset,
                startLine: startLine + offsetLine,
                endLine: _endLine + offsetLine,
                startCol: startCol + (startLine === 1 ? offsetColumn : 0),
                endCol: _endCol + (startLine === _endLine ? offsetColumn : 0),
                nodeName: tagName,
                type: 'starttag',
                namespace: getNamespace(originNode),
                elementType: (0, parser_utils_1.detectElementType)(tagName),
                attributes: tagTokens.attrs,
                hasSpreadAttr: false,
                parentNode,
                prevNode,
                nextNode,
                pearNode: endTag,
                selfClosingSolidus: tagTokens.selfClosingSolidus,
                endSpace: tagTokens.endSpace,
                isFragment: false,
                isGhost: false,
                tagOpenChar: '<',
                tagCloseChar: '>',
            };
            if (endTag) {
                endTag.pearNode = startTag;
            }
            startTag.childNodes = createTreeRecursive(originNode, startTag, rawHtml, offsetOffset, offsetLine, offsetColumn);
            return startTag;
        }
    }
}
/**
 * getChildNodes
 *
 * - If node has "content" property then parse as document fragment.
 */
function getChildNodes(rootNode) {
    var _a;
    return rootNode.content ? rootNode.content.childNodes : (_a = rootNode.childNodes) !== null && _a !== void 0 ? _a : [];
}
function hasLocation(node) {
    return 'sourceCodeLocation' in node;
}
function getLocation(node) {
    if (hasLocation(node) && node.sourceCodeLocation) {
        return node.sourceCodeLocation;
    }
    return null;
}
function getNamespace(node) {
    if ('namespaceURI' in node) {
        return node.namespaceURI;
    }
    return '';
}
