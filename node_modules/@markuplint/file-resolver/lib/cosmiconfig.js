"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = exports.search = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const parser_utils_1 = require("@markuplint/parser-utils");
const cosmiconfig_1 = require("cosmiconfig");
const cosmiconfig_typescript_loader_1 = require("cosmiconfig-typescript-loader");
const jsonc_1 = require("jsonc");
const explorer = (0, cosmiconfig_1.cosmiconfig)('markuplint', {
    loaders: {
        '.ts': (0, cosmiconfig_typescript_loader_1.TypeScriptLoader)(),
        noExt: ((path, content) => {
            try {
                return jsonc_1.jsonc.parse(content);
            }
            catch (error) {
                if (error instanceof Error && error.name === 'JSONError') {
                    return cosmiconfig_1.defaultLoaders['noExt'](path, content);
                }
                throw error;
            }
        }),
    },
});
async function search(dir, cacheClear) {
    if (cacheClear) {
        explorer.clearCaches();
    }
    dir = path_1.default.dirname(dir);
    const result = await explorer.search(dir).catch(cacheConfigError(dir));
    if (!result || result.isEmpty) {
        return null;
    }
    return {
        filePath: result.filepath,
        config: result.config,
    };
}
exports.search = search;
async function load(filePath, cacheClear) {
    if (cacheClear) {
        explorer.clearCaches();
    }
    const result = await explorer.load(filePath).catch(cacheConfigError(filePath));
    if (!result || result.isEmpty) {
        return null;
    }
    return {
        filePath: result.filepath,
        config: result.config,
    };
}
exports.load = load;
class ConfigLoadError extends Error {
    constructor(message, filePath) {
        super(message + ` in ${filePath}`);
        this.name = 'ConfigLoadError';
    }
}
function cacheConfigError(fileOrDirPath) {
    return (reason) => {
        var _a;
        if (reason instanceof Error) {
            switch (reason.name) {
                case 'YAMLException':
                    throw new parser_utils_1.ConfigParserError(reason.message, {
                        // @ts-ignore
                        filePath: (_a = reason.filepath) !== null && _a !== void 0 ? _a : fileOrDirPath,
                    });
            }
            throw new ConfigLoadError(reason.message, fileOrDirPath);
        }
        throw reason;
    };
}
