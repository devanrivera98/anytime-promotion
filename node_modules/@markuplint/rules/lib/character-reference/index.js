"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const defaultChars = ['"', '&', '<', '>'];
const ignoreParentElement = ['script', 'style'];
exports.default = (0, ml_core_1.createRule)({
    async verify({ document, report, t }) {
        const targetNodes = [];
        await document.walkOn('Text', node => {
            if (node.parentNode && ignoreParentElement.includes(node.parentNode.nodeName.toLowerCase())) {
                return;
            }
            const severity = node.rule.severity;
            const ms = severity === 'error' ? 'must' : 'should';
            const message = t(`{0} ${ms} {1}`, 'Illegal characters', 'escape in character reference');
            targetNodes.push({
                scope: node,
                line: node.startLine,
                col: node.startCol,
                raw: node.raw,
                message,
            });
        });
        await document.walkOn('Element', node => {
            const severity = node.rule.severity;
            const ms = severity === 'error' ? 'must' : 'should';
            const message = t(`{0} ${ms} {1}`, 'Illegal characters', 'escape in character reference');
            for (const attr of node.attributes) {
                if (attr.isDynamicValue || attr.isDirective) {
                    continue;
                }
                const valueNode = attr.valueNode;
                targetNodes.push({
                    scope: node,
                    line: valueNode === null || valueNode === void 0 ? void 0 : valueNode.startLine,
                    col: valueNode === null || valueNode === void 0 ? void 0 : valueNode.startCol,
                    raw: valueNode === null || valueNode === void 0 ? void 0 : valueNode.raw,
                    message,
                });
            }
        });
        for (const targetNode of targetNodes) {
            if (!('scope' in targetNode && 'line' in targetNode && targetNode.line != null)) {
                continue;
            }
            const escapedText = targetNode.raw.replace(/&(?:[a-z]+|#[0-9]+|#x[0-9a-f]+);/gi, $0 => '*'.repeat($0.length));
            (0, ml_core_1.getLocationFromChars)(defaultChars, escapedText, targetNode.line, targetNode.col).forEach(location => {
                report({
                    scope: targetNode.scope,
                    message: targetNode.message,
                    ...location,
                });
            });
        }
    },
});
