"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const ml_spec_1 = require("@markuplint/ml-spec");
const shared_1 = require("@markuplint/shared");
const HYPERLINK_SELECTOR = 'a[href], area[href]';
exports.default = (0, ml_core_1.createRule)({
    defaultOptions: {
        ariaVersion: ml_spec_1.ARIA_RECOMMENDED_VERSION,
        fragmentRefersNameAttr: false,
    },
    async verify({ document, report, t }) {
        const idList = new Set();
        const nameList = new Set();
        let hasDynamicId = false;
        let hasDynamicName = false;
        const isMutable = document.nodeList.some(node => node.is(node.MARKUPLINT_PREPROCESSOR_BLOCK));
        if (isMutable) {
            return;
        }
        document.querySelectorAll('[id]').forEach(el => {
            const attr = el.getAttributeNode('id');
            if (!attr) {
                return;
            }
            if (attr.isDynamicValue) {
                hasDynamicId = true;
            }
            if (attr.valueType !== 'code') {
                idList.add((0, shared_1.decodeEntities)(attr.value));
            }
        });
        if (hasDynamicId) {
            return;
        }
        document.querySelectorAll('[name]').forEach(el => {
            const attr = el.getAttributeNode('name');
            if (!attr) {
                return;
            }
            if (attr.isDynamicValue) {
                hasDynamicName = true;
            }
            if (attr.valueType !== 'code') {
                nameList.add((0, shared_1.decodeEntities)(attr.value));
            }
        });
        await document.walkOn('Attr', attr => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const attrSpec = (0, ml_core_1.getAttrSpecs)(attr.ownerElement, document.specs);
            if (!attrSpec) {
                return;
            }
            if (attr.isDynamicValue) {
                return;
            }
            const name = attr.name;
            if (name.toLowerCase() === 'id') {
                return;
            }
            const value = attr.value;
            const spec = attrSpec.find(s => s.name === name);
            if (spec) {
                // DOMID and DOMID List do not become in the array type.
                if (Array.isArray(spec.type)) {
                    return;
                }
                if (spec.type === 'DOMID' && !idList.has(value)) {
                    report({
                        scope: attr,
                        line: (_a = attr.valueNode) === null || _a === void 0 ? void 0 : _a.startLine,
                        col: (_b = attr.valueNode) === null || _b === void 0 ? void 0 : _b.startCol,
                        raw: (_c = attr.valueNode) === null || _c === void 0 ? void 0 : _c.raw,
                        message: t('Missing {0}', t('"{0*}" ID', value)),
                    });
                }
                if (typeof spec.type !== 'string' && 'token' in spec.type && spec.type.token === 'DOMID') {
                    const refs = value
                        .split(spec.type.separator === 'space' ? /\s/ : ',')
                        .map(id => id.trim())
                        .filter(_ => _);
                    for (const ref of refs) {
                        if (!idList.has(ref)) {
                            report({
                                scope: attr,
                                line: (_d = attr.valueNode) === null || _d === void 0 ? void 0 : _d.startLine,
                                col: (_e = attr.valueNode) === null || _e === void 0 ? void 0 : _e.startCol,
                                raw: (_f = attr.valueNode) === null || _f === void 0 ? void 0 : _f.raw,
                                message: t('Missing {0}', t('"{0*}" ID', ref)),
                            });
                        }
                    }
                }
            }
            const { props } = (0, ml_core_1.ariaSpecs)(document.specs, attr.rule.options.ariaVersion);
            const aria = props.find(prop => prop.name === name);
            if (aria) {
                if (aria.value === 'ID reference' && !idList.has(value)) {
                    report({
                        scope: attr,
                        line: (_g = attr.valueNode) === null || _g === void 0 ? void 0 : _g.startLine,
                        col: (_h = attr.valueNode) === null || _h === void 0 ? void 0 : _h.startCol,
                        raw: (_j = attr.valueNode) === null || _j === void 0 ? void 0 : _j.raw,
                        message: t('Missing {0}', t('"{0*}" ID', value)),
                    });
                }
                else if (aria.value === 'ID reference list') {
                    const refs = value
                        .split(/\s/)
                        .map(id => id.trim())
                        .filter(_ => _);
                    for (const ref of refs) {
                        if (!idList.has(ref)) {
                            report({
                                scope: attr,
                                line: (_k = attr.valueNode) === null || _k === void 0 ? void 0 : _k.startLine,
                                col: (_l = attr.valueNode) === null || _l === void 0 ? void 0 : _l.startCol,
                                raw: (_m = attr.valueNode) === null || _m === void 0 ? void 0 : _m.raw,
                                message: t('Missing {0}', t('"{0*}" ID', ref)),
                            });
                        }
                    }
                }
            }
        });
        /**
         * @see https://html.spec.whatwg.org/multipage/browsing-the-web.html#scrolling-to-a-fragment
         */
        await document.walkOn('Element', el => {
            var _a, _b, _c, _d;
            if (el.rule.options.fragmentRefersNameAttr && hasDynamicName) {
                return;
            }
            if (!el.matches(HYPERLINK_SELECTOR)) {
                return;
            }
            const href = el.getAttributeNode('href');
            if (!href) {
                return;
            }
            const rawFragment = (_a = href.value.match(/^#(.+)/)) === null || _a === void 0 ? void 0 : _a[1];
            if (rawFragment == null) {
                return;
            }
            const decodedFragment = (0, shared_1.decodeHref)(rawFragment);
            // > 2. If fragment is the empty string, then return the special value top of the document.
            // >
            // > 9. If decodedFragment is an ASCII case-insensitive match for the string top, then return the top of the document.
            if (decodedFragment === '' || /^top$/i.test(decodedFragment)) {
                return;
            }
            if (!idList.has(decodedFragment) &&
                (el.rule.options.fragmentRefersNameAttr ? !nameList.has(decodedFragment) : true)) {
                report({
                    scope: href,
                    line: (_b = href.valueNode) === null || _b === void 0 ? void 0 : _b.startLine,
                    col: (_c = href.valueNode) === null || _c === void 0 ? void 0 : _c.startCol,
                    raw: (_d = href.valueNode) === null || _d === void 0 ? void 0 : _d.raw,
                    message: t('Missing {0}', t('"{0*}" ID', decodedFragment)),
                });
            }
        });
    },
});
