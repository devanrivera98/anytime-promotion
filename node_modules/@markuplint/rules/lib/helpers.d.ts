import type { Log } from './debug';
import type { Translator } from '@markuplint/i18n';
import type { PlainData } from '@markuplint/ml-config';
import type { Element, RuleConfigValue, Document } from '@markuplint/ml-core';
import type { Attribute } from '@markuplint/ml-spec';
import type { WritableDeep } from 'type-fest';
export declare function attrMatches<T extends RuleConfigValue, O extends PlainData>(node: Element<T, O>, condition: Attribute['condition']): boolean;
export declare function match(needle: string, pattern: string): boolean;
/**
 * PotentialCustomElementName
 *
 * @see https://spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname
 *
 * > PotentialCustomElementName ::=
 * >   [a-z] (PCENChar)* '-' (PCENChar)*
 * > PCENChar ::=
 * >   "-" | "." | [0-9] | "_" | [a-z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
 * >   [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
 * > This uses the EBNF notation from the XML specification. [XML]
 *
 * ASCII-case-insensitively.
 * Originally, it is not possible to define a name including ASCII upper alphas in the custom element, but it is not treated as illegal by the HTML parser.
 */
export declare const rePCENChar: string;
export declare function isValidAttr(t: Translator, name: string, value: string, isDynamicValue: boolean, node: Element<any, any>, attrSpecs: readonly Attribute[], log?: Log): false | {
    invalidType: "non-existent" | "invalid-value" | "disallowed-attr";
    message: string;
    loc?: {
        raw: string;
        line: number;
        col: number;
    } | undefined;
};
export declare function toNormalizedValue(value: string, spec: Attribute): string;
export declare function accnameMayBeMutable(el: Element<any, any>, document: Document<any, any>): boolean;
export declare function getOwnedLabel<V extends RuleConfigValue, O extends PlainData>(el: Element<V, O>, document: Document<V, O>): Element<V, O> | null;
export declare class Collection<T> {
    #private;
    constructor(...items: readonly (T | null | undefined)[]);
    [Symbol.iterator](): Iterator<T>;
    add(...items: readonly (T | null | undefined)[]): void;
    toArray(): readonly T[];
}
export declare function deepCopy<T>(value: T): WritableDeep<T>;
