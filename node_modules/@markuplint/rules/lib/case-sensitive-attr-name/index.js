"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
exports.default = (0, ml_core_1.createRule)({
    defaultSeverity: 'warning',
    defaultValue: 'lower',
    async verify({ document, report, t }) {
        await document.walkOn('Attr', attr => {
            var _a, _b, _c, _d;
            const el = attr.ownerElement;
            if (el.isForeignElement || el.elementType !== 'html') {
                return;
            }
            const value = attr.rule.value;
            const ms = attr.rule.severity === 'error' ? 'must' : 'should';
            const deny = value === 'lower' ? /[A-Z]/ : /[a-z]/;
            const cases = value === 'lower' ? 'lower' : 'upper';
            const message = t(`{0} ${ms} be {1}`, t('{0} of {1}', 'attribute names', 'HTML elements'), `${cases}case`);
            const attrSpecs = (0, ml_core_1.getAttrSpecs)(el, document.specs);
            /**
             * Ignore when it has the potential name,
             * it Interprets `tabIndex` to `tabindex` in JSX for example.
             */
            if (((_a = attr.nameNode) === null || _a === void 0 ? void 0 : _a.raw) !== attr.name) {
                return;
            }
            const name = attr.name;
            if (attrSpecs) {
                const spec = attrSpecs.find(spec => spec.name === name);
                if (spec && spec.caseSensitive) {
                    return;
                }
            }
            if (deny.test(name)) {
                report({
                    scope: attr,
                    line: (_b = attr.nameNode) === null || _b === void 0 ? void 0 : _b.startLine,
                    col: (_c = attr.nameNode) === null || _c === void 0 ? void 0 : _c.startCol,
                    raw: (_d = attr.nameNode) === null || _d === void 0 ? void 0 : _d.raw,
                    message,
                });
            }
        });
    },
    async fix({ document }) {
        await document.walkOn('Attr', attr => {
            var _a;
            const el = attr.ownerElement;
            if (el.isForeignElement || el.elementType !== 'html') {
                return;
            }
            const attrSpecs = (0, ml_core_1.getAttrSpecs)(el, document.specs);
            const value = attr.rule.value;
            /**
             * Ignore when it has the potential name,
             * it Interprets `tabIndex` to `tabindex` in JSX for example.
             */
            if (((_a = attr.nameNode) === null || _a === void 0 ? void 0 : _a.raw) !== attr.name) {
                return;
            }
            const name = attr.name;
            if (attrSpecs) {
                const spec = attrSpecs.find(spec => spec.name === name);
                if (spec && spec.caseSensitive) {
                    return;
                }
            }
            if (value === 'lower') {
                attr.nameNode.fix(name.toLowerCase());
            }
            else {
                attr.nameNode.fix(name.toUpperCase());
            }
        });
    },
});
