"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.choice = void 0;
const debug_1 = require("./debug");
const order_1 = require("./order");
const utils_1 = require("./utils");
const indexes = new WeakMap();
function choice(pattern, 
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
elements, specs, options, depth) {
    const choiceLog = debug_1.cmLog.extend(`choice#${depth}`);
    const collection = new utils_1.Collection(elements);
    const unmatchedResults = [];
    let i = 0;
    for (const some of pattern.choice) {
        choiceLog('Patterns[%s]: %s', i, (0, utils_1.modelLog)(some, ''));
        const result = (0, order_1.order)(some, collection.unmatched, specs, options, depth + 1);
        if (result.type === 'MATCHED' ||
            result.type === 'MATCHED_ZERO' ||
            (result.type === 'UNEXPECTED_EXTRA_NODE' && result.matched.length >= 1)) {
            choiceLog('Results[%s]: %s', i, choiceLogString(pattern.choice, i));
            return {
                type: result.type,
                matched: result.matched,
                unmatched: result.unmatched,
                zeroMatch: result.zeroMatch,
                query: result.query,
                hint: result.hint,
            };
        }
        unmatchedResults.push(result);
        collection.addMatched(result.matched);
        indexes.set(result, i);
        i++;
    }
    const barelyMatchedResult = unmatchedResults.sort((a, b) => {
        var _c, _d, _e, _f;
        if (a.type !== b.type) {
            if (a.type === 'UNEXPECTED_EXTRA_NODE') {
                return -1;
            }
            if (b.type === 'UNEXPECTED_EXTRA_NODE') {
                return 1;
            }
        }
        const computed1 = b.matched.length - a.matched.length;
        if (computed1 !== 0) {
            return computed1;
        }
        const _a = (_d = (_c = a.hint.missing) === null || _c === void 0 ? void 0 : _c.barelyMatchedElements) !== null && _d !== void 0 ? _d : 0;
        const _b = (_f = (_e = b.hint.missing) === null || _e === void 0 ? void 0 : _e.barelyMatchedElements) !== null && _f !== void 0 ? _f : 0;
        const computed2 = _b - _a;
        return computed2;
    })[0];
    if (!barelyMatchedResult) {
        throw new Error('Unreachable code');
    }
    const index = indexes.get(barelyMatchedResult);
    if (index != null) {
        choiceLog('Results[%s]: %s', index, choiceLogString(pattern.choice, index, true));
    }
    return {
        type: barelyMatchedResult.type,
        matched: collection.matched,
        unmatched: collection.unmatched,
        zeroMatch: barelyMatchedResult.zeroMatch,
        query: barelyMatchedResult.query,
        hint: barelyMatchedResult.hint,
    };
}
exports.choice = choice;
function choiceLogString(choice, index, barely = false) {
    const colorFn = barely ? debug_1.bgBlue : debug_1.bgGreen;
    return choice
        .map((pattern, i) => {
        if (i === index) {
            return colorFn((0, utils_1.modelLog)(pattern, ''));
        }
        return (0, utils_1.modelLog)(pattern, '');
    })
        .join(', ');
}
