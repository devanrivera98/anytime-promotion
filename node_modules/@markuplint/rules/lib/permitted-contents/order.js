"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.order = void 0;
const helpers_1 = require("../helpers");
const complex_branch_1 = require("./complex-branch");
const debug_1 = require("./debug");
const utils_1 = require("./utils");
/**
 * Check ordered array
 *
 * @param contents
 * @param nodes
 * @param specs
 * @param options
 * @param depth
 * @returns
 */
function order(contents, 
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
nodes, specs, options, depth) {
    var _a, _b, _c, _d, _e;
    const orderLog = debug_1.cmLog.extend(`order#${depth}`);
    const btLog = debug_1.cmLog.extend(`backtrack#${depth}`);
    const patterns = (0, helpers_1.deepCopy)(contents);
    const collection = new utils_1.Collection(nodes);
    orderLog('Model:\n  RegEx: %s\n  Schema: %o', (0, utils_1.modelLog)(patterns, ''), patterns);
    orderLog('Starts: %s', collection);
    let result = undefined;
    let backtrackMode = false;
    let afterBacktrack = false;
    const unmatchedResults = [];
    while (patterns.length > 0 && patterns[0]) {
        result = (0, complex_branch_1.complexBranch)(patterns[0], collection.unmatched, specs, options, depth);
        collection.addMatched(result.matched);
        if (result.type !== 'UNEXPECTED_EXTRA_NODE' && result.type !== 'MATCHED' && result.type !== 'MATCHED_ZERO') {
            unmatchedResults.push(result);
            if (backtrackMode) {
                collection.back();
                btLog('ðŸ”™â—€BACK');
                backtrackMode = false;
                afterBacktrack = true;
                continue;
            }
            const barelyMatchedResult = unmatchedResults.sort((a, b) => b.matched.length - a.matched.length)[0];
            if (!barelyMatchedResult) {
                throw new Error('Unreachable code');
            }
            orderLog('Result (%s): %s%s', result.type, collection.toString(true), ((_a = barelyMatchedResult.hint.missing) === null || _a === void 0 ? void 0 : _a.barelyMatchedElements) != null
                ? `; But ${barelyMatchedResult.hint.missing.barelyMatchedElements} elements hit out of pattern`
                : '');
            return {
                type: barelyMatchedResult.type,
                matched: collection.matched,
                unmatched: collection.unmatched,
                zeroMatch: barelyMatchedResult.zeroMatch,
                query: barelyMatchedResult.query,
                hint: (0, utils_1.mergeHints)(barelyMatchedResult.hint, {
                    missing: {
                        barelyMatchedElements: collection.matched.length,
                        need: barelyMatchedResult.query,
                    },
                }),
            };
        }
        if (afterBacktrack) {
            collection.lock();
            afterBacktrack = false;
        }
        if (result.zeroMatch) {
            backtrackMode = true;
        }
        else {
            backtrackMode = false;
        }
        patterns.shift();
    }
    if (collection.unmatched.length > 0) {
        orderLog('Result (UNEXPECTED_EXTRA_NODE): %s', collection.toString(true));
        return {
            type: 'UNEXPECTED_EXTRA_NODE',
            matched: collection.matched,
            unmatched: collection.unmatched,
            zeroMatch: false,
            query: (_b = result === null || result === void 0 ? void 0 : result.query) !== null && _b !== void 0 ? _b : 'N/A',
            hint: (_c = result === null || result === void 0 ? void 0 : result.hint) !== null && _c !== void 0 ? _c : {},
        };
    }
    const resultType = collection.matched.length > 0 ? 'MATCHED' : 'MATCHED_ZERO';
    orderLog('Result (%s): %s', resultType, collection.toString(true));
    return {
        type: resultType,
        matched: collection.matched,
        unmatched: collection.unmatched,
        zeroMatch: false,
        query: (_d = result === null || result === void 0 ? void 0 : result.query) !== null && _d !== void 0 ? _d : 'N/A',
        hint: (_e = result === null || result === void 0 ? void 0 : result.hint) !== null && _e !== void 0 ? _e : {},
    };
}
exports.order = order;
