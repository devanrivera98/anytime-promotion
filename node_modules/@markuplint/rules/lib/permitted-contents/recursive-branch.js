"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recursiveBranch = void 0;
const matches_selector_1 = require("./matches-selector");
const order_1 = require("./order");
const utils_1 = require("./utils");
function recursiveBranch(model, 
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
nodes, specs, options, depth) {
    if (!(0, utils_1.isModel)(model)) {
        return (0, order_1.order)(model, nodes, specs, options, depth + 1);
    }
    if (typeof model === 'string') {
        return (0, matches_selector_1.matchesSelector)(model, nodes[0], specs, depth);
    }
    const collection = new utils_1.Collection(nodes);
    let lastUnmatched = null;
    for (const query of model) {
        const result = (0, matches_selector_1.matchesSelector)(query, collection.unmatched[0], specs, depth);
        collection.addMatched(result.matched);
        if (result.type === 'MATCHED' || result.type === 'MATCHED_ZERO') {
            return {
                type: result.type,
                matched: collection.matched,
                unmatched: collection.unmatched,
                zeroMatch: result.zeroMatch,
                query: result.query,
                hint: result.hint,
            };
        }
        lastUnmatched = {
            type: result.type,
            matched: collection.matched,
            unmatched: collection.unmatched,
            zeroMatch: result.zeroMatch,
            query: result.query,
            hint: result.hint,
        };
    }
    if (!lastUnmatched) {
        throw new Error('Unreachable code');
    }
    return lastUnmatched;
}
exports.recursiveBranch = recursiveBranch;
