"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
exports.default = (0, ml_core_1.createRule)({
    defaultSeverity: 'warning',
    async verify({ document, report, t }) {
        await document.walkOn('Attr', attr => {
            var _a, _b;
            const attrSpec = (0, ml_core_1.getAttrSpecs)(attr.ownerElement, document.specs);
            if (!attrSpec) {
                return;
            }
            if (attr.isDynamicValue) {
                return;
            }
            const name = attr.name;
            const spec = attrSpec.find(s => s.name === name);
            if (!spec) {
                return;
            }
            if (spec.type !== 'Boolean') {
                return;
            }
            const extraTokens = [
                attr.spacesBeforeEqual,
                attr.equal,
                attr.spacesAfterEqual,
                attr.startQuote,
                attr.valueNode,
                attr.endQuote,
            ];
            const extraRaw = extraTokens.reduce((raw, t) => { var _a; return raw + ((_a = t === null || t === void 0 ? void 0 : t.raw) !== null && _a !== void 0 ? _a : ''); }, '');
            if (extraRaw) {
                report({
                    scope: attr,
                    line: (_a = attr.spacesBeforeEqual) === null || _a === void 0 ? void 0 : _a.startLine,
                    col: (_b = attr.spacesBeforeEqual) === null || _b === void 0 ? void 0 : _b.startCol,
                    raw: extraRaw,
                    message: t('{0} is {1}', t('the "{0*}" {1}', name, 'attribute'), t('a {0}', 'boolean attribute')) +
                        t('. ') +
                        t("It doesn't need {0}", t('the {0}', 'value')),
                });
            }
        });
    },
});
