"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
exports.default = (0, ml_core_1.createRule)({
    verify({ document, report, t }) {
        document.querySelectorAll('select').forEach(select => {
            if (hasPlaceholderLabelOption(select)) {
                return;
            }
            if (!needPlaceholderLabelOption(select)) {
                return;
            }
            report({
                scope: select,
                message: t('need {0}', t('the {0}', 'placeholder label option')),
            });
        });
    },
});
/**
 * > If a select element has a required attribute specified,
 * > does not have a multiple attribute specified,
 * > and has a display size of 1,
 * > then the select element must have a placeholder label option.
 *
 * @param select
 * @returns
 */
function needPlaceholderLabelOption(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
select) {
    var _a;
    const hasRequired = select.hasAttribute('required');
    if (!hasRequired) {
        return false;
    }
    const hasMultiple = select.hasAttribute('multiple');
    if (hasMultiple) {
        return false;
    }
    const size = (_a = select.getAttribute('size')) !== null && _a !== void 0 ? _a : '1';
    if (size !== '1') {
        return false;
    }
    return true;
}
/**
 * > If a select element has a required attribute specified,
 * > does not have a multiple attribute specified,
 * > and has a display size of 1;
 * > and if the value of the first option element
 * > in the select element's list of options (if any) is the empty string,
 * > and that option element's parent node is the select element (and not an optgroup element),
 * > then that option is the select element's **placeholder label option**.
 *
 * @param select
 * @returns
 */
function hasPlaceholderLabelOption(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
select) {
    var _a, _b;
    // > has a required attribute specified
    if (!select.hasAttribute('required')) {
        return false;
    }
    // > does not have a multiple attribute specified
    if (select.hasAttribute('multiple')) {
        return false;
    }
    // > has a display size of 1
    const size = (_a = select.getAttribute('size')) !== null && _a !== void 0 ? _a : '1';
    if (size !== '1') {
        return false;
    }
    // > in the select element's list of options (if any) is the empty string
    const firstOption = select.querySelector('option');
    if (!firstOption) {
        // if any
        return true;
    }
    // > that option element's parent node is the select element (and not an optgroup element)
    if (((_b = firstOption.parentElement) === null || _b === void 0 ? void 0 : _b.localName) === 'optgroup') {
        return false;
    }
    const value = firstOption.getAttribute('value');
    return value === '' || value === null;
}
