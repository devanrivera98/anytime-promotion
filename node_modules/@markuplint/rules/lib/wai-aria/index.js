"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const ml_spec_1 = require("@markuplint/ml-spec");
const helpers_1 = require("../helpers");
const abstract_role_1 = require("./checkings/abstract-role");
const default_value_1 = require("./checkings/default-value");
const deprecated_props_1 = require("./checkings/deprecated-props");
const disallowed_prop_1 = require("./checkings/disallowed-prop");
const implicit_props_1 = require("./checkings/implicit-props");
const implicit_role_1 = require("./checkings/implicit-role");
const interaction_in_hidden_1 = require("./checkings/interaction-in-hidden");
const no_global_prop_1 = require("./checkings/no-global-prop");
const non_existent_role_1 = require("./checkings/non-existent-role");
const permitted_roles_1 = require("./checkings/permitted-roles");
const presentational_children_1 = require("./checkings/presentational-children");
const required_owned_elements_1 = require("./checkings/required-owned-elements");
const required_prop_1 = require("./checkings/required-prop");
const value_1 = require("./checkings/value");
exports.default = (0, ml_core_1.createRule)({
    defaultOptions: {
        checkingValue: true,
        checkingDeprecatedProps: true,
        permittedAriaRoles: true,
        checkingRequiredOwnedElements: true,
        checkingPresentationalChildren: false,
        checkingInteractionInHidden: false,
        disallowSetImplicitRole: true,
        disallowSetImplicitProps: true,
        disallowDefaultValue: false,
        version: ml_spec_1.ARIA_RECOMMENDED_VERSION,
    },
    async verify({ document, report, t }) {
        await document.walkOn('Element', el => {
            const roleAttr = el.getAttributeNode('role');
            const propAttrs = el.attributes.filter(attr => /^aria-/i.test(attr.name));
            const ariaAttrs = new helpers_1.Collection(roleAttr, ...propAttrs);
            const elSpec = (0, ml_core_1.getSpec)(el, document.specs.specs);
            if (!elSpec) {
                return;
            }
            if (!elSpec.globalAttrs['#ARIAAttrs']) {
                for (const ariaAttr of ariaAttrs) {
                    report({
                        scope: ariaAttr,
                        message: 'ARIA attribute is disallowed',
                    });
                }
                return;
            }
            const computed = (0, ml_core_1.getComputedRole)(document.specs, el, el.rule.options.version);
            const { props: propSpecs } = (0, ml_core_1.ariaSpecs)(document.specs, el.rule.options.version);
            if (roleAttr) {
                if (report((0, non_existent_role_1.checkingNonExistentRole)({ attr: roleAttr }))) {
                    return;
                }
                if (report((0, abstract_role_1.checkingAbstractRole)({ attr: roleAttr }))) {
                    return;
                }
                report((0, required_prop_1.checkingRequiredProp)({ el, role: computed.role, propSpecs }));
                if (el.rule.options.disallowSetImplicitRole) {
                    report((0, implicit_role_1.checkingImplicitRole)({ attr: roleAttr }));
                }
                if (el.rule.options.permittedAriaRoles) {
                    report((0, permitted_roles_1.checkingPermittedRoles)({ attr: roleAttr }));
                }
            }
            for (const attr of propAttrs) {
                report((0, disallowed_prop_1.checkingDisallowedProp)({ attr, role: computed.role, propSpecs }));
                if (el.rule.options.checkingDeprecatedProps) {
                    report((0, deprecated_props_1.checkingDeprecatedProps)({ attr, role: computed.role, propSpecs }));
                }
                if (el.rule.options.disallowSetImplicitProps) {
                    const attrSpecs = (0, ml_core_1.getAttrSpecs)(el, document.specs);
                    report((0, implicit_props_1.checkingImplicitProps)({ attr, propSpecs, attrSpecs }));
                }
                if (el.rule.options.checkingValue) {
                    report((0, value_1.checkingValue)({ attr, role: computed.role, propSpecs, booleanish: document.booleanish }));
                }
                if (el.rule.options.disallowDefaultValue) {
                    report((0, default_value_1.checkingDefaultValue)({ attr, propSpecs }));
                }
                if (!computed.role) {
                    report((0, no_global_prop_1.checkingNoGlobalProp)({ attr, propSpecs }));
                }
            }
            if (el.rule.options.checkingRequiredOwnedElements) {
                report((0, required_owned_elements_1.checkingRequiredOwnedElements)({ el, role: computed.role }));
            }
            if (el.rule.options.checkingPresentationalChildren) {
                report((0, presentational_children_1.checkingPresentationalChildren)({ el }));
            }
            if (el.rule.options.checkingInteractionInHidden) {
                report((0, interaction_in_hidden_1.checkingInteractionInHidden)({ el }));
            }
        });
    },
});
