"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkingDisallowedProp = void 0;
const ml_spec_1 = require("@markuplint/ml-spec");
const checkingDisallowedProp = ({ attr, role, propSpecs }) => t => {
    var _a, _b, _c, _d;
    if (!role) {
        return;
    }
    if (!/^aria-/i.test(attr.name)) {
        return;
    }
    const statesAndProp = role.ownedProperties.find(p => p.name === attr.name);
    const propSpec = propSpecs.find(p => p.name === attr.name);
    const elAriaSpec = (0, ml_spec_1.getARIA)(attr.ownerMLDocument.specs, attr.ownerElement.localName, attr.ownerElement.namespaceURI, attr.rule.options.version, attr.ownerElement.matches.bind(attr.ownerElement));
    if ((elAriaSpec === null || elAriaSpec === void 0 ? void 0 : elAriaSpec.properties) !== false && ((_a = elAriaSpec === null || elAriaSpec === void 0 ? void 0 : elAriaSpec.properties) === null || _a === void 0 ? void 0 : _a.without)) {
        for (const ignore of elAriaSpec.properties.without) {
            if (ignore.name === attr.name) {
                return {
                    scope: attr,
                    message: t('{0:c} on {1}', t(ignore.type === 'must-not'
                        ? '{0} must not {1}'
                        : ignore.type === 'should-not'
                            ? '{0} should not {1}'
                            : '{0} is not recommended to {1}', 
                    // {0}
                    t('the "{0*}" {1}', attr.name, `ARIA ${(_b = propSpec === null || propSpec === void 0 ? void 0 : propSpec.type) !== null && _b !== void 0 ? _b : 'property'}`), 
                    // {1}
                    'use'), t('the "{0*}" {1}', attr.ownerElement.localName, 'element')) +
                        (ignore.alt
                            ? t('. ') +
                                t('{0} if you {1} {2}', t(ignore.alt.method === 'remove-attr' ? 'Remove {0}' : 'Add {0}', t('the "{0*}" {1}', ignore.alt.target, 'attribute')), 'use', t('the {0}', `ARIA ${(_c = propSpec === null || propSpec === void 0 ? void 0 : propSpec.type) !== null && _c !== void 0 ? _c : 'property'}`))
                            : ''),
                };
            }
        }
    }
    if (statesAndProp) {
        return;
    }
    return {
        scope: attr,
        message: t('{0:c} on {1}', t('{0} is {1:c}', t('the "{0*}" {1}', attr.name, `ARIA ${(_d = propSpec === null || propSpec === void 0 ? void 0 : propSpec.type) !== null && _d !== void 0 ? _d : 'property'}`), 'disallowed'), t('the "{0*}" {1}', role.name, 'role')),
    };
};
exports.checkingDisallowedProp = checkingDisallowedProp;
