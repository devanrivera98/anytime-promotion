"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkingPermittedRoles = void 0;
const ml_spec_1 = require("@markuplint/ml-spec");
const checkingPermittedRoles = ({ attr }) => t => {
    var _a;
    const el = attr.ownerElement;
    const permittedRoles = (0, ml_spec_1.getPermittedRoles)(el, el.rule.options.version, attr.ownerMLDocument.specs);
    if (permittedRoles.length === 0) {
        return {
            scope: attr,
            message: t('{0} according to {1}', t('Cannot overwrite {0}', t('{0} of {1}', t('the {0}', 'role'), t('the "{0*}" {1}', el.localName, 'element'))), 'ARIA in HTML specification'),
        };
    }
    const tokens = (_a = attr.tokenList) === null || _a === void 0 ? void 0 : _a.allTokens();
    if (!tokens) {
        return;
    }
    for (const token of tokens) {
        if (Array.isArray(permittedRoles) && !permittedRoles.map(r => r.name).includes(token.raw)) {
            return {
                scope: token,
                message: t('{0} according to {1}', t('Cannot overwrite {0} to {1}', t('the "{0*}" {1}', token.raw, 'role'), t('the "{0*}" {1}', el.localName, 'element')), 'ARIA in HTML specification'),
            };
        }
    }
};
exports.checkingPermittedRoles = checkingPermittedRoles;
