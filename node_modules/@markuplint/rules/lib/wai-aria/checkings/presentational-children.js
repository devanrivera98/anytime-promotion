"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkingPresentationalChildren = void 0;
const ml_spec_1 = require("@markuplint/ml-spec");
/**
 * Presentational Children
 *
 * @see https://www.w3.org/TR/wai-aria/#childrenArePresentational
 * @see https://w3c.github.io/aria/#childrenArePresentational
 *
 * > The DOM descendants are presentational.
 * > user agents SHOULD NOT expose descendants of
 * > this element through the platform accessibility API.
 * > If user agents do not hide the descendant nodes,
 * > some information may be read twice.
 *
 * @see https://w3c.github.io/aria/#tree_exclusion
 *
 * > Any descendants of elements that have the characteristic "Children Presentational: True"
 * > unless the descendant is not allowed to be presentational
 * > because it meets one of the conditions for exception described
 * > in Presentational Roles Conflict Resolution.
 * > However, the text content of any excluded descendants is included.
 *
 * @see https://w3c.github.io/aria/#tree_inclusion
 *
 *  > Text equivalents for hidden referenced objects
 * > may still be used in the name and description computation
 * > even when not included in the accessibility tree.
 */
const checkingPresentationalChildren = ({ el }) => t => {
    const ancestor = getAncestorHasPresentationalChildren(el);
    if (!ancestor) {
        return;
    }
    if (!ancestor.role) {
        return;
    }
    const hasAriaAttr = Array.from(el.attributes).some(attr => /^aria-|^role$/i.test(attr.name));
    if (!hasAriaAttr) {
        return;
    }
    return {
        scope: el,
        message: t('it may be ineffective because {0}', t("it has {0} as an ancestor that doesn't expose its descendants to the accessibility tree", t('the "{0*}" {1}', ancestor.role.name, 'role'))),
    };
};
exports.checkingPresentationalChildren = checkingPresentationalChildren;
function getAncestorHasPresentationalChildren(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el) {
    var _a;
    let current = el.parentElement;
    while (current) {
        const computed = (0, ml_spec_1.getComputedRole)(el.ownerMLDocument.specs, current, el.rule.options.version);
        if ((_a = computed.role) === null || _a === void 0 ? void 0 : _a.childrenPresentational) {
            return computed;
        }
        current = current.parentElement;
    }
    return null;
}
