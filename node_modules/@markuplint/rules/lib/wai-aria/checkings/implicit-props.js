"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkingImplicitProps = void 0;
const helpers_1 = require("../../helpers");
const checkingImplicitProps = ({ attr, propSpecs, attrSpecs }) => t => {
    var _a;
    if (!attrSpecs) {
        return;
    }
    if (attr.isDynamicValue) {
        return;
    }
    const propSpec = propSpecs.find(p => p.name === attr.name);
    if (!(propSpec === null || propSpec === void 0 ? void 0 : propSpec.equivalentHtmlAttrs)) {
        return;
    }
    for (const equivalentHtmlAttr of propSpec.equivalentHtmlAttrs) {
        const htmlAttrSpec = attrSpecs.find(a => a.name === equivalentHtmlAttr.htmlAttrName);
        const isValid = (0, helpers_1.isValidAttr)(t, equivalentHtmlAttr.htmlAttrName, (_a = equivalentHtmlAttr.value) !== null && _a !== void 0 ? _a : '', false, attr.ownerElement, attrSpecs);
        if (isValid !== false && isValid.invalidType === 'non-existent') {
            continue;
        }
        const value = attr.value.trim().toLowerCase();
        if (attr.ownerElement.hasAttribute(equivalentHtmlAttr.htmlAttrName)) {
            const targetAttrValue = attr.ownerElement.getAttribute(equivalentHtmlAttr.htmlAttrName);
            if ((equivalentHtmlAttr.value == null && targetAttrValue === value) ||
                equivalentHtmlAttr.value === value) {
                return {
                    scope: attr,
                    message: t('{0} has {1}', t('the "{0*}" {1}', attr.name, `ARIA ${propSpec.type}`), t('the same {0} as {1}', 'semantics', t('{0} or {1}', t('the current "{0}" {1}', equivalentHtmlAttr.htmlAttrName, 'attribute'), t('the implicit "{0}" {1}', equivalentHtmlAttr.htmlAttrName, 'attribute')))),
                };
            }
            if ((htmlAttrSpec === null || htmlAttrSpec === void 0 ? void 0 : htmlAttrSpec.type) === 'Boolean' && value !== 'false') {
                continue;
            }
            return {
                scope: attr,
                message: t('{0} contradicts {1}', t('the "{0*}" {1}', attr.name, `ARIA ${propSpec.type}`), t('the current "{0}" {1}', equivalentHtmlAttr.htmlAttrName, 'attribute')),
            };
        }
        else if (value === 'true') {
            if (!equivalentHtmlAttr.isNotStrictEquivalent && (htmlAttrSpec === null || htmlAttrSpec === void 0 ? void 0 : htmlAttrSpec.type) === 'Boolean') {
                return {
                    scope: attr,
                    message: t('{0} contradicts {1}', t('the "{0*}" {1}', attr.name, `ARIA ${propSpec.type}`), t('the implicit "{0}" {1}', equivalentHtmlAttr.htmlAttrName, 'attribute')),
                };
            }
        }
    }
};
exports.checkingImplicitProps = checkingImplicitProps;
