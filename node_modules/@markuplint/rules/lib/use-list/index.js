"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const shared_1 = require("@markuplint/shared");
exports.default = (0, ml_core_1.createRule)({
    defaultValue: [
        /**
         * @see https://en.wikipedia.org/wiki/Bullet_(typography)#In_Unicode
         */
        '\u2022',
        '\u2023',
        '\u2043',
        '\u204C',
        '\u204D',
        '\u2219',
        '\u25CB',
        '\u25CF',
        '\u25D8',
        '\u25E6',
        '\u2619',
        '\u2765',
        '\u2767',
        '\u29BE',
        '\u29BF',
        /**
         * In Japanese
         * @see https://ja.wikipedia.org/wiki/中黒#符号位置
         */
        '\u00B7',
        '\u0387',
        '\u2022',
        '\u2219',
        '\u22C5',
        '\u30FB',
        '\uFF65',
        /**
         * In Other Languages
         */
        /* REQUEST WANTED: https://github.com/markuplint/markuplint/issues/new */
        /**
         * From Markdown
         */
        '-',
        '*',
        '+', // plus signs
    ],
    defaultOptions: {
        spaceNeededBullets: [
            /**
             * From Markdown
             */
            '-',
            '*',
            '+', // plus signs
        ],
    },
    defaultSeverity: 'warning',
    async verify({ document, report, t }) {
        await document.walkOn('Text', textNode => {
            var _a;
            const text = (0, shared_1.decodeEntities)(textNode.raw.trim());
            if (!text) {
                // empty
                return;
            }
            if (text.length === 1) {
                // character only
                return;
            }
            const bullets = textNode.rule.value;
            const spaceNeededBullets = (_a = textNode.rule.options.spaceNeededBullets) !== null && _a !== void 0 ? _a : [];
            if (isMayListItem(text, bullets, spaceNeededBullets)) {
                report({
                    scope: textNode,
                    message: t('Use {0}', t('the {0}', t('{0*} element', 'li'))),
                });
            }
        });
    },
});
function isMayListItem(text, bullets, spaceNeededBullets) {
    var _a;
    const textArray = Array.from(text);
    const firstLetter = (_a = textArray[0]) !== null && _a !== void 0 ? _a : '';
    const isBullet = bullets.includes(firstLetter);
    const needSpace = spaceNeededBullets.includes(firstLetter);
    const continuous = firstLetter === textArray[1];
    if (continuous) {
        return false;
    }
    if (isBullet && needSpace && text[1]) {
        const secondLetter = text[1];
        const isSpace = /^\s$/.test(secondLetter);
        return isSpace;
    }
    return isBullet;
}
