"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ml_core_1 = require("@markuplint/ml-core");
const shared_1 = require("@markuplint/shared");
const helpers_1 = require("../helpers");
exports.default = (0, ml_core_1.createRule)({
    defaultSeverity: 'warning',
    defaultValue: null,
    async verify({ document, report, t }) {
        await document.walkOn('Element', el => {
            const classPatterns = (0, shared_1.toNoEmptyStringArrayFromStringOrArray)(el.rule.value).filter(className => className && typeof className === 'string');
            const attrs = el.getAttributeToken('class');
            for (const attr of attrs) {
                if (attr.isDynamicValue) {
                    continue;
                }
                const classAttr = attr.valueNode;
                const classList = attr.value
                    .split(/\s+/g)
                    .map(c => c.trim())
                    .filter(c => c);
                for (const className of classList) {
                    if (!classPatterns.some(pattern => (0, helpers_1.match)(className, pattern))) {
                        report({
                            scope: attr,
                            message: t('{0} is unmatched with the below patterns: {1}', t('the "{0*}" {1}', className, 'class name'), `"${classPatterns.join('", "')}"`),
                            line: classAttr === null || classAttr === void 0 ? void 0 : classAttr.startLine,
                            col: classAttr === null || classAttr === void 0 ? void 0 : classAttr.startCol,
                            raw: classAttr === null || classAttr === void 0 ? void 0 : classAttr.raw,
                        });
                    }
                }
            }
        });
    },
});
