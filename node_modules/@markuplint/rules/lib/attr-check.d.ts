import type { Translator } from '@markuplint/i18n';
import type { Attribute as AttrSpec, AttributeType } from '@markuplint/ml-spec';
import type { ReadonlyDeep } from 'type-fest';
type Invalid = {
    invalidType: 'non-existent' | 'invalid-value' | 'disallowed-attr';
    message: string;
    loc?: Loc;
};
type Loc = {
    raw: string;
    line: number;
    col: number;
};
/**
 * Use in rules `invalid-attr` and `wai-aria`
 *
 * @param name
 * @param value
 * @param isCustomRule
 * @param spec
 */
export declare function attrCheck(t: Translator, name: string, value: string, isCustomRule: boolean, spec?: AttrSpec): Invalid | false;
export declare function valueCheck(t: Translator, name: string, value: string, type: ReadonlyDeep<AttributeType>): [string, Loc] | false;
export {};
