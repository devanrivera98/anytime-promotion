"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installScaffold = void 0;
const tslib_1 = require("tslib");
const promises_1 = tslib_1.__importDefault(require("node:fs/promises"));
const node_path_1 = require("node:path");
const fs_exists_1 = require("./fs-exists");
const transfer_1 = require("./transfer");
async function installScaffold(scaffoldType, dest, params) {
    var _a, _b, _c;
    const exists = await (0, fs_exists_1.fsExists)(dest);
    if (!exists) {
        await promises_1.default.mkdir(dest);
    }
    const scaffoldDir = (0, node_path_1.resolve)(__dirname, '..', 'scaffold', scaffoldType);
    const transferred = await (0, transfer_1.transfer)(scaffoldType, scaffoldDir, dest, {
        transpile: params.lang === 'JAVASCRIPT',
        test: params.needTest,
        replacer: {
            pluginName: params.pluginName,
            ruleName: params.ruleName,
            description: (_a = params.core) === null || _a === void 0 ? void 0 : _a.description,
            category: (_b = params.core) === null || _b === void 0 ? void 0 : _b.category,
            severity: (_c = params.core) === null || _c === void 0 ? void 0 : _c.severity,
        },
    });
    const packageJson = params.packageJson ? (0, node_path_1.resolve)(dest, 'package.json') : null;
    const dependencies = [];
    const devDependencies = [];
    if (packageJson) {
        const ext = params.lang === 'JAVASCRIPT' ? 'js' : 'ts';
        const packageContent = {
            name: params.ruleName,
            scripts: {},
            jest: {
                moduleFileExtensions: ['js', ...(params.lang === 'TYPESCRIPT' ? ['ts'] : [])],
                testRegex: `(\\.|/)(spec|test)\\.${ext}$`,
                testEnvironment: 'node',
                transform: params.lang === 'TYPESCRIPT'
                    ? {
                        '^.+\\.ts$': 'ts-jest',
                    }
                    : undefined,
            },
            babel: params.needTest && params.lang === 'JAVASCRIPT'
                ? {
                    presets: [
                        [
                            '@babel/preset-env',
                            {
                                targets: {
                                    node: 'current',
                                },
                            },
                        ],
                    ],
                }
                : undefined,
        };
        if (params.lang === 'TYPESCRIPT') {
            packageContent.scripts.build = 'tsc';
        }
        dependencies.push('@markuplint/ml-core');
        devDependencies.push('markuplint');
        if (params.needTest) {
            packageContent.scripts.test = 'jest';
            devDependencies.push('jest');
            if (params.lang === 'TYPESCRIPT') {
                devDependencies.push('@types/jest');
                devDependencies.push('ts-jest');
            }
            else {
                devDependencies.push('babel-jest');
                devDependencies.push('@babel/core');
                devDependencies.push('@babel/preset-env');
            }
        }
        if (params.lang === 'TYPESCRIPT') {
            devDependencies.push('typescript');
        }
        await promises_1.default.writeFile(packageJson, JSON.stringify(packageContent, null, 2), { encoding: 'utf-8' });
        transferred.push({
            ext: '.json',
            name: 'package',
            fileName: 'package',
            test: false,
            destDir: dest,
            filePath: packageJson,
        });
    }
    return {
        files: transferred,
        dependencies,
        devDependencies,
    };
}
exports.installScaffold = installScaffold;
