"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dummySchemas = exports.createTestElement = exports.createTestTokenList = exports.createTestNodeList = exports.createTestDocument = void 0;
const tslib_1 = require("tslib");
const html_parser_1 = require("@markuplint/html-parser");
const html_spec_1 = tslib_1.__importDefault(require("@markuplint/html-spec"));
const convert_ruleset_1 = require("../convert-ruleset");
const ml_dom_1 = require("../ml-dom");
function createTestDocument(sourceCode, options) {
    var _a;
    const ast = (options === null || options === void 0 ? void 0 : options.parser) ? options.parser.parse(sourceCode) : (0, html_parser_1.parse)(sourceCode);
    const ruleset = (0, convert_ruleset_1.convertRuleset)(options === null || options === void 0 ? void 0 : options.config);
    const document = new ml_dom_1.Document(ast, ruleset, [(_a = options === null || options === void 0 ? void 0 : options.specs) !== null && _a !== void 0 ? _a : {}, {}]);
    return document;
}
exports.createTestDocument = createTestDocument;
function createTestNodeList(sourceCode, options) {
    const document = createTestDocument(sourceCode, options);
    return document.nodeList;
}
exports.createTestNodeList = createTestNodeList;
function createTestTokenList(sourceCode, options) {
    const document = createTestDocument(sourceCode, options);
    return document.getTokenList();
}
exports.createTestTokenList = createTestTokenList;
function createTestElement(sourceCode, options) {
    const document = createTestDocument(sourceCode, options);
    const el = document.nodeList[0];
    if (el && el.is(el.ELEMENT_NODE)) {
        return el;
    }
    throw TypeError(`Could not parse it to be an element from: ${sourceCode}`);
}
exports.createTestElement = createTestElement;
/**
 * for test suite
 */
function dummySchemas() {
    return [html_spec_1.default];
}
exports.dummySchemas = dummySchemas;
