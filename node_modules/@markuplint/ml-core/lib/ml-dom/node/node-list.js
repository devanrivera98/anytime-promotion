"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeListToHTMLCollection = exports.toHTMLCollection = exports.toNodeList = void 0;
class MLNodeList extends Array {
    forEach(callbackfn, thisArg) {
        return super.forEach.bind(this)((v, k) => callbackfn(v, k, thisArg !== null && thisArg !== void 0 ? thisArg : this));
    }
    item(index) {
        const node = this[index];
        if (!node) {
            /**
             * âš  TYPE CONTRADICTION
             *
             * It throws an error because it should return null but the `item` method of `NodeListOf` doesn't return null in the type definition of TypeScript.
             *
             * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-844377136
             *
             * > item
             * > Returns the index-th item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
             */
            throw new ReferenceError('Invalid index');
        }
        return node;
    }
}
function toNodeList(nodes) {
    const nodeList = new MLNodeList(...nodes);
    return nodeList;
}
exports.toNodeList = toNodeList;
class MLHTMLCollection extends Array {
    item(index) {
        var _a;
        return (_a = this[index]) !== null && _a !== void 0 ? _a : null;
    }
    namedItem(name) {
        var _a;
        return (_a = this.find(el => el.getAttribute('name') === name)) !== null && _a !== void 0 ? _a : null;
    }
}
function toHTMLCollection(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
nodes) {
    const collection = new MLHTMLCollection(...nodes);
    return collection;
}
exports.toHTMLCollection = toHTMLCollection;
function nodeListToHTMLCollection(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
nodeList) {
    const collection = new MLHTMLCollection();
    nodeList.forEach(node => {
        if (node.is(node.ELEMENT_NODE)) {
            collection.push(node);
        }
    });
    return collection;
}
exports.nodeListToHTMLCollection = nodeListToHTMLCollection;
