"use strict";
var _RuleMapper_nodeList, _RuleMapper_ruleMap;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleMapper = void 0;
const tslib_1 = require("tslib");
const selector_1 = require("@markuplint/selector");
const debug_1 = require("../../debug");
const ruleMapperLog = debug_1.log.extend('rule-mapper');
const ruleMapperNodeLog = ruleMapperLog.extend('node');
const ruleMapperNodeRuleLog = ruleMapperNodeLog.extend('rule');
class RuleMapper {
    constructor(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    document) {
        _RuleMapper_nodeList.set(this, void 0);
        _RuleMapper_ruleMap.set(this, new Map());
        tslib_1.__classPrivateFieldSet(this, _RuleMapper_nodeList, Object.freeze([document, ...document.nodeList]), "f");
    }
    apply() {
        ruleMapperLog('ruleTree:');
        tslib_1.__classPrivateFieldGet(this, _RuleMapper_nodeList, "f").forEach(node => {
            const rules = tslib_1.__classPrivateFieldGet(this, _RuleMapper_ruleMap, "f").get(node.uuid);
            if (!rules) {
                return;
            }
            ruleMapperNodeLog('<%s>', node.nodeName);
            Object.keys(rules).forEach(ruleName => {
                const rule = rules[ruleName];
                if (!rule) {
                    return;
                }
                node.rules[ruleName] = rule.rule;
                ruleMapperNodeRuleLog('[from: %s(%s)] %s: %o', rule.from, rule.specificity, ruleName, rule.rule);
            });
        });
    }
    set(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    node, ruleName, rule) {
        var _a;
        const rules = (_a = tslib_1.__classPrivateFieldGet(this, _RuleMapper_ruleMap, "f").get(node.uuid)) !== null && _a !== void 0 ? _a : {};
        const currentRule = rules[ruleName];
        if (currentRule) {
            const order = (0, selector_1.compareSpecificity)(currentRule.specificity, rule.specificity);
            if (order === 1) {
                ruleMapperLog("Don't set %o ([%s] vs [%s])", rule, currentRule.specificity, rule.specificity);
                return;
            }
            ruleMapperLog('Unset %o from %s', currentRule, node);
        }
        rules[ruleName] = rule;
        tslib_1.__classPrivateFieldGet(this, _RuleMapper_ruleMap, "f").set(node.uuid, rules);
        ruleMapperLog('Set to %s from %s (%o): %O', node.nodeName, rule.from, rule.specificity, rule.rule);
    }
}
exports.RuleMapper = RuleMapper;
_RuleMapper_nodeList = new WeakMap(), _RuleMapper_ruleMap = new WeakMap();
