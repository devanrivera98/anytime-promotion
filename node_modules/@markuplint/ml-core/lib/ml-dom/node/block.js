"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLBlock = void 0;
const child_node_methods_1 = require("../manipulations/child-node-methods");
const node_1 = require("./node");
class MLBlock extends node_1.MLNode {
    constructor(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    astNode, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    document) {
        super(astNode, document);
        // TODO:
        this.isTransparent = true;
    }
    /**
     * Returns a string appropriate for the type of node as `MLBlock`
     *
     * @implements `@markuplint/ml-core` API: `MLBlock`
     */
    get nodeName() {
        return '#ml-block';
    }
    /**
     * Returns a number appropriate for the type of `MLBlock`
     *
     * @implements `@markuplint/ml-core` API: `MLBlock`
     */
    get nodeType() {
        return this.MARKUPLINT_PREPROCESSOR_BLOCK;
    }
    /**
     * @implements DOM API: `ChildNode`
     */
    after(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    ...nodes) {
        (0, child_node_methods_1.after)(this, ...nodes);
    }
    /**
     * @implements DOM API: `ChildNode`
     */
    before(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    ...nodes) {
        (0, child_node_methods_1.before)(this, ...nodes);
    }
    /**
     * @implements DOM API: `ChildNode`
     */
    remove() {
        (0, child_node_methods_1.remove)(this);
    }
    /**
     * @implements DOM API: `ChildNode`
     */
    replaceWith(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    ...nodes) {
        (0, child_node_methods_1.replaceWith)(this, ...nodes);
    }
}
exports.MLBlock = MLBlock;
