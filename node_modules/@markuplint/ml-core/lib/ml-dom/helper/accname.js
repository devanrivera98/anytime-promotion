"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccname = void 0;
const ml_spec_1 = require("@markuplint/ml-spec");
const debug_1 = require("../../debug");
const accnameLog = debug_1.log.extend('accname');
function getAccname(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, version) {
    let accname = safeGet(el);
    if (accname) {
        return accname;
    }
    accname = getAccnameFromPretender(el);
    if (accname) {
        return accname;
    }
    if (isHidden(el)) {
        return '';
    }
    if (isFromContent(el, version)) {
        return Array.from(el.childNodes)
            .map(child => {
            var _a;
            if (child.is(child.ELEMENT_NODE)) {
                return getAccname(child, version);
            }
            if (child.is(child.TEXT_NODE)) {
                return (_a = child.textContent) !== null && _a !== void 0 ? _a : '';
            }
            return '';
        })
            .join('');
    }
    return '';
}
exports.getAccname = getAccname;
function safeGet(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el) {
    try {
        const name = (0, ml_spec_1.getAccname)(el);
        return name;
    }
    catch (err) {
        accnameLog('Raw: %s', el.raw);
        accnameLog('Error: %O', err);
        return '';
    }
}
function getAccnameFromPretender(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el) {
    var _a, _b;
    if (((_a = el.pretenderContext) === null || _a === void 0 ? void 0 : _a.type) === 'pretender' && ((_b = el.pretenderContext.aria) === null || _b === void 0 ? void 0 : _b.name) != null) {
        if (typeof el.pretenderContext.aria.name === 'boolean') {
            return 'some-name(Pretender Options)';
        }
        const attrName = el.pretenderContext.aria.name.fromAttr;
        const attrValue = el.getAttributePretended(attrName);
        if (attrValue) {
            return attrValue;
        }
    }
    return '';
}
function isHidden(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el) {
    return el.getAttribute('aria-hidden') === 'true' || el.hasAttribute('hidden');
}
function isFromContent(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, version) {
    var _a;
    const role = (0, ml_spec_1.getComputedRole)(el.ownerMLDocument.specs, el, version);
    return !!((_a = role.role) === null || _a === void 0 ? void 0 : _a.accessibleNameFromContent);
}
