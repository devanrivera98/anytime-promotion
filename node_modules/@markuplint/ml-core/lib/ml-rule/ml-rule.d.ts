import type { RuleSeed } from './types';
import type { Ruleset } from '..';
import type { MLDocument } from '../ml-dom/node/document';
import type { LocaleSet } from '@markuplint/i18n';
import type { GlobalRuleInfo, PlainData, Rule, RuleConfigValue, RuleInfo, Severity, Violation } from '@markuplint/ml-config';
export declare class MLRule<T extends RuleConfigValue, O extends PlainData = undefined> {
    #private;
    readonly defaultOptions: O;
    readonly defaultSeverity: Severity;
    readonly defaultValue: T;
    readonly name: string;
    constructor(o: Readonly<RuleSeed<T, O>> & {
        readonly name: string;
    });
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    protected get f(): RuleSeed<T, O>['fix'];
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    protected get v(): RuleSeed<T, O>['verify'];
    getRuleInfo(ruleSet: Ruleset, ruleName: string): GlobalRuleInfo<T, O>;
    optimizeOption(configSettings: Rule<T, O> | null | undefined): RuleInfo<T, O>;
    verify(document: MLDocument<T, O>, locale: LocaleSet, fix: boolean): Promise<Violation[]>;
    private _optimize;
}
export type AnyMLRule = MLRule<RuleConfigValue, PlainData>;
