"use strict";
var _MLRule_f, _MLRule_v;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLRule = void 0;
const tslib_1 = require("tslib");
const ml_config_1 = require("@markuplint/ml-config");
const is_plain_object_1 = require("is-plain-object");
const ml_rule_context_1 = require("./ml-rule-context");
class MLRule {
    constructor(o) {
        var _a;
        _MLRule_f.set(this, void 0);
        _MLRule_v.set(this, void 0);
        this.name = o.name;
        this.defaultSeverity = (_a = o.defaultSeverity) !== null && _a !== void 0 ? _a : 'error';
        // TODO: https://github.com/markuplint/markuplint/issues/808
        this.defaultValue = (o.defaultValue !== undefined ? o.defaultValue : true);
        this.defaultOptions = o.defaultOptions;
        tslib_1.__classPrivateFieldSet(this, _MLRule_v, o.verify, "f");
        tslib_1.__classPrivateFieldSet(this, _MLRule_f, o.fix, "f");
    }
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    get f() {
        return tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f");
    }
    /**
     * The following getter is unused internally,
     * only for extending from 3rd party library
     */
    get v() {
        return tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f");
    }
    getRuleInfo(ruleSet, ruleName) {
        const info = this._optimize(ruleSet.rules, ruleName);
        return {
            ...info,
            nodeRules: ruleSet.nodeRules.map(r => this._optimize(r.rules, ruleName)).filter(r => !r.disabled),
            childNodeRules: ruleSet.childNodeRules.map(r => this._optimize(r.rules, ruleName)).filter(r => !r.disabled),
        };
    }
    optimizeOption(configSettings) {
        var _a;
        if (configSettings === undefined || typeof configSettings === 'boolean') {
            return {
                disabled: !configSettings,
                severity: this.defaultSeverity,
                value: this.defaultValue,
                options: this.defaultOptions,
                reason: undefined,
            };
        }
        if (isRuleConfig(configSettings)) {
            return {
                disabled: false,
                severity: (_a = configSettings.severity) !== null && _a !== void 0 ? _a : this.defaultSeverity,
                value: configSettings.value === undefined ||
                    // @ts-ignore
                    configSettings.value === true
                    ? this.defaultValue
                    : configSettings.value,
                options: mergeOptions(this.defaultOptions, configSettings.options),
                reason: configSettings.reason,
            };
        }
        return {
            disabled: false,
            severity: this.defaultSeverity,
            value: configSettings == null ? this.defaultValue : configSettings,
            options: this.defaultOptions,
            reason: undefined,
        };
    }
    async verify(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    document, locale, fix) {
        document.setRule(this);
        const context = new ml_rule_context_1.MLRuleContext(document, locale);
        const providableContext = context.provide();
        await tslib_1.__classPrivateFieldGet(this, _MLRule_v, "f").call(this, providableContext);
        if (tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f") && fix) {
            await tslib_1.__classPrivateFieldGet(this, _MLRule_f, "f").call(this, providableContext);
        }
        const violation = context.reports.map(report => {
            var _a;
            if ('scope' in report) {
                let line = report.scope.startLine;
                let col = report.scope.startCol;
                let raw = report.scope.raw;
                if ('line' in report && report.line != null) {
                    line = report.line;
                    col = report.col;
                    raw = report.raw;
                }
                const violation = {
                    severity: report.scope.rule.severity,
                    message: report.message,
                    line,
                    col,
                    raw,
                    ruleId: this.name,
                    reason: (_a = report.scope.rule.reason) !== null && _a !== void 0 ? _a : document.rule.reason,
                };
                (0, ml_config_1.deleteUndefProp)(violation);
                return violation;
            }
            const violation = {
                severity: document.rule.severity,
                message: report.message,
                line: report.line,
                col: report.col,
                raw: report.raw,
                ruleId: this.name,
                reason: document.rule.reason,
            };
            (0, ml_config_1.deleteUndefProp)(violation);
            return violation;
        });
        document.setRule(null);
        return violation;
    }
    _optimize(rules, ruleName) {
        var _a;
        const rule = ((_a = rules === null || rules === void 0 ? void 0 : rules[ruleName]) !== null && _a !== void 0 ? _a : false);
        const info = this.optimizeOption(rule);
        return info;
    }
}
exports.MLRule = MLRule;
_MLRule_f = new WeakMap(), _MLRule_v = new WeakMap();
function isRuleConfig(data) {
    return (0, is_plain_object_1.isPlainObject)(data);
}
function mergeOptions(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) {
        // @ts-ignore
        return [...a, ...b];
    }
    if ((0, is_plain_object_1.isPlainObject)(a) && (0, is_plain_object_1.isPlainObject)(b)) {
        // @ts-ignore
        return { ...a, ...b };
    }
    return b !== null && b !== void 0 ? b : a;
}
