"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoleSpec = void 0;
const aria_specs_1 = require("./aria-specs");
function getRoleSpec(specs, roleName, namespace, version) {
    var _a, _b, _c, _d;
    const role = getRoleByName(specs, roleName, namespace, version);
    if (!role) {
        return null;
    }
    const superClassRoles = recursiveTraverseSuperClassRoles(specs, roleName, namespace, version);
    return {
        name: role.name,
        isAbstract: !!role.isAbstract,
        requiredContextRole: (_a = role.requiredContextRole) !== null && _a !== void 0 ? _a : [],
        requiredOwnedElements: (_b = role.requiredOwnedElements) !== null && _b !== void 0 ? _b : [],
        accessibleNameRequired: !!role.accessibleNameRequired,
        accessibleNameFromAuthor: !!role.accessibleNameFromAuthor,
        accessibleNameFromContent: !!role.accessibleNameFromContent,
        accessibleNameProhibited: !!role.accessibleNameProhibited,
        childrenPresentational: !!role.childrenPresentational,
        ownedProperties: (_c = role.ownedProperties) !== null && _c !== void 0 ? _c : [],
        prohibitedProperties: (_d = role.prohibitedProperties) !== null && _d !== void 0 ? _d : [],
        superClassRoles,
    };
}
exports.getRoleSpec = getRoleSpec;
function recursiveTraverseSuperClassRoles(specs, roleName, namespace, version) {
    const roles = [];
    const superClassRoles = getSuperClassRoles(specs, roleName, namespace, version);
    if (superClassRoles) {
        roles.push(...superClassRoles);
        for (const superClassRole of superClassRoles) {
            const ancestorRoles = recursiveTraverseSuperClassRoles(specs, superClassRole.name, namespace, version);
            roles.push(...ancestorRoles);
        }
    }
    return roles;
}
function getSuperClassRoles(specs, roleName, namespace, version) {
    var _a, _b;
    const role = getRoleByName(specs, roleName, namespace, version);
    return ((_b = (_a = role === null || role === void 0 ? void 0 : role.generalization) === null || _a === void 0 ? void 0 : _a.map(roleName => getRoleByName(specs, roleName, namespace, version)).filter((role) => !!role)) !== null && _b !== void 0 ? _b : null);
}
function getRoleByName(specs, roleName, namespace, version) {
    const { roles, graphicsRoles } = (0, aria_specs_1.ariaSpecs)(specs, version);
    let role = roles.find(r => r.name === roleName);
    if (!role && namespace === 'http://www.w3.org/2000/svg') {
        role = graphicsRoles.find(r => r.name === roleName);
    }
    return role;
}
