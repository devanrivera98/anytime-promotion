"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getARIA = void 0;
const get_spec_by_tag_name_1 = require("./get-spec-by-tag-name");
const resolve_version_1 = require("./resolve-version");
const cache = new Map();
function getARIA(specs, localName, namespace, version, matches) {
    var _a, _b, _c, _d, _e;
    const aria = getVersionResolvedARIA(specs, localName, namespace, version);
    if (!aria) {
        return null;
    }
    const conditions = aria.conditions;
    if (!conditions) {
        return aria;
    }
    const conditionKeys = Object.keys(conditions);
    let { implicitRole, permittedRoles, implicitProperties, properties, namingProhibited } = aria;
    for (const cond of conditionKeys) {
        if (!matches(cond)) {
            continue;
        }
        const condARIA = conditions[cond];
        if (!condARIA) {
            continue;
        }
        implicitRole = (_a = condARIA.implicitRole) !== null && _a !== void 0 ? _a : implicitRole;
        permittedRoles = (_b = condARIA.permittedRoles) !== null && _b !== void 0 ? _b : permittedRoles;
        implicitProperties = (_c = condARIA.implicitProperties) !== null && _c !== void 0 ? _c : implicitProperties;
        properties = (_d = condARIA.properties) !== null && _d !== void 0 ? _d : properties;
        namingProhibited = (_e = condARIA.namingProhibited) !== null && _e !== void 0 ? _e : namingProhibited;
    }
    return {
        implicitRole,
        permittedRoles,
        implicitProperties,
        properties,
        namingProhibited,
    };
}
exports.getARIA = getARIA;
function getVersionResolvedARIA(specs, localName, namespace, version) {
    var _a;
    const key = localName + namespace + version;
    let aria = cache.get(key);
    if (aria !== undefined) {
        return aria;
    }
    const spec = (_a = (0, get_spec_by_tag_name_1.getSpecByTagName)(specs.specs, localName, namespace)) === null || _a === void 0 ? void 0 : _a.aria;
    if (!spec) {
        cache.set(key, null);
        return null;
    }
    aria = (0, resolve_version_1.resolveVersion)(spec, version);
    if (aria.permittedRoles !== false) {
        aria = {
            ...aria,
            permittedRoles: optimizePermittedRoles(aria.permittedRoles),
        };
    }
    cache.set(key, aria);
    return aria;
}
function optimizePermittedRoles(permittedRoles) {
    if (!Array.isArray(permittedRoles)) {
        return permittedRoles;
    }
    const unique = new Set(permittedRoles);
    // https://www.w3.org/TR/wai-aria-1.2/#note-regarding-the-aria-1-1-none-role
    if (unique.has('presentation')) {
        unique.add('none');
    }
    if (unique.has('none')) {
        unique.add('presentation');
    }
    return Array.from(unique).sort();
}
