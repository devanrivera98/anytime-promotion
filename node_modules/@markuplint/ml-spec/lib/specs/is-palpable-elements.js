"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPalpableElement = void 0;
/**
 * Exposable content models and elements
 *
 * **WARNING**:
 * This implementation is through the author's interpretation.
 * Want a issue request.
 * https://github.com/markuplint/markuplint/issues/new
 *
 * @see https://html.spec.whatwg.org/multipage/indices.html#elements-3
 */
const exposableElementsThatAreNoBelongingAModel = [
    'body',
    'dd',
    'dt',
    'figcaption',
    'html',
    'legend',
    'li',
    'optgroup',
    'option',
    'rp',
    'rt',
    'summary',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'tr',
];
function isPalpableElement(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs, options) {
    var _a, _b, _c, _d;
    const conditions = [(_b = (_a = specs.def['#contentModels']['#palpable']) === null || _a === void 0 ? void 0 : _a.join(',')) !== null && _b !== void 0 ? _b : ''];
    if ((options === null || options === void 0 ? void 0 : options.extendsSvg) !== false /* default true */) {
        conditions.push((_d = (_c = specs.def['#contentModels']['#SVGRenderable']) === null || _c === void 0 ? void 0 : _c.join(',')) !== null && _d !== void 0 ? _d : '');
    }
    if (options === null || options === void 0 ? void 0 : options.extendsExposableElements /* default false */) {
        conditions.push(exposableElementsThatAreNoBelongingAModel.join(','));
    }
    return conditions.some(condition => {
        return el.matches(condition);
    });
}
exports.isPalpableElement = isPalpableElement;
