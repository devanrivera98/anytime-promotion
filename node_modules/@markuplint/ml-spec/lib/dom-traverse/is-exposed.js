"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExposed = void 0;
const aria_specs_1 = require("../specs/aria-specs");
const get_spec_by_tag_name_1 = require("../specs/get-spec-by-tag-name");
const is_presentational_1 = require("../specs/is-presentational");
const resolve_namespace_1 = require("../utils/resolve-namespace");
const get_computed_role_1 = require("./get-computed-role");
/**
 * Detect including/excluding from the Accessibility Tree
 *
 * @see https://www.w3.org/TR/wai-aria-1.2/#accessibility_tree
 *
 * @param specs
 * @param el
 * @param version
 */
function isExposed(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs, version) {
    // According to WAI-ARIA
    if (isExcluding(el, specs, version)) {
        return false;
    }
    // Return true if the element is unknown, deprecated, or obsolete.
    const { localName, namespace } = (0, resolve_namespace_1.resolveNamespace)(el.localName, el.namespaceURI);
    const spec = (0, get_spec_by_tag_name_1.getSpecByTagName)(specs.specs, localName, namespace);
    if (!spec || spec.deprecated || spec.obsolete != null) {
        return true;
    }
    // According to HTML and SVG Specs with **the author's interpretation**
    {
        if (!isExposedElement(el, specs)) {
            return false;
        }
    }
    // According to WAI-ARIA
    {
        const exposable = isIncluding(el, specs, version);
        if (exposable) {
            return true;
        }
    }
    // Default
    return true;
}
exports.isExposed = isExposed;
/**
 * Excluding Elements from the Accessibility Tree
 *
 * @see https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion
 *
 * @param specs
 * @param el
 * @param version
 */
function isExcluding(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs, version) {
    var _a;
    /**
     * The following elements are not exposed via the accessibility API and
     * user agents MUST NOT include them in the accessibility tree:
     * - Elements, including their descendent elements,
     *   that have host language semantics specifying
     *   that the element is not displayed, such as CSS display:none,
     *   visibility:hidden, or the HTML hidden attribute.
     */
    {
        let currentEl = el;
        while (currentEl) {
            if (hasDisplayNodeOrVisibilityHidden(currentEl) || currentEl.hasAttribute('hidden')) {
                return true;
            }
            currentEl = currentEl.parentElement;
        }
    }
    /**
     * - Elements with none or presentation as the first role in the role attribute.
     *   However, their exclusion is conditional. In addition,
     *   the element's descendants and text content are generally included.
     *   These exceptions and conditions are documented in the presentation (role)
     *   section.
     */
    if ((0, is_presentational_1.isPresentational)(((_a = el.getAttribute('role')) !== null && _a !== void 0 ? _a : '').split(/\s+/)[0])) {
        return true;
    }
    /**
     * If not already excluded from the accessibility tree per the above rules,
     * user agents SHOULD NOT include the following elements
     * in the accessibility tree:
     * - Elements, including their descendants, that have aria-hidden set to true.
     *   In other words, aria-hidden="true" on a parent overrides aria-hidden="false"
     *   on descendants.
     */
    {
        let currentEl = el;
        while (currentEl) {
            if (currentEl.getAttribute('aria-hidden') === 'true') {
                return true;
            }
            currentEl = currentEl.parentElement;
        }
    }
    /**
     * - Any descendants of elements that have the characteristic
     *   "Children Presentational: True" unless the descendant
     *   is not allowed to be presentational because it meets one of
     *   the conditions for exception described in
     *   Presentational Roles Conflict Resolution.
     *   However, the text content of any excluded descendants is included.
     */
    {
        let currentEl = el.parentElement;
        while (currentEl) {
            const { role } = (0, get_computed_role_1.getComputedRole)(specs, currentEl, version);
            if (role === null || role === void 0 ? void 0 : role.childrenPresentational) {
                return true;
            }
            currentEl = currentEl.parentElement;
        }
    }
    return false;
}
/**
 * Including Elements in the Accessibility Tree
 *
 * If not excluded from or marked as hidden in the accessibility tree
 * per the rules above in Excluding Elements in the Accessibility Tree,
 * user agents MUST provide an accessible object in the accessibility tree
 * for DOM elements that meet any of the following criteria:
 *
 * @see https://www.w3.org/TR/wai-aria-1.2/#tree_inclusion
 *
 * @param specs
 * @param el
 * @param version
 */
function isIncluding(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs, version) {
    /**
     * > **meet any** of the following criteria:
     */
    const results = [];
    /**
     * Elements that are not hidden and may fire an accessibility API event,
     * including:
     * - Elements that are currently focused, even if the element or one of
     *   its ancestor elements has its aria-hidden attribute set to true.
     */
    // ðŸš« Can't detect the element is focused.
    // results.push(true);
    /**
     * - Elements that are a valid target of an aria-activedescendant attribute.
     */
    // TODO: Compute aria-activedescendant.
    // results.push(true);
    /**
     * Elements that have an explicit role or a global WAI-ARIA attribute and
     * do not have aria-hidden set to true.
     * (See Excluding Elements in the Accessibility Tree for
     * additional guidance on aria-hidden.)
     */
    if (el.getAttribute('aria-hidden') !== 'true') {
        const globalAria = (0, aria_specs_1.ariaSpecs)(specs, version).props.filter(prop => prop.isGlobal);
        const { role } = (0, get_computed_role_1.getComputedRole)(specs, el, version);
        // Has an explicit role
        if (role && !role.isImplicit) {
            results.push(true);
        }
        // Has a global WAI-ARIA attribute
        for (const attr of Array.from(el.attributes)) {
            if (globalAria.some(aria => aria.name === attr.localName)) {
                results.push(true);
                break;
            }
        }
    }
    /**
     * Elements that are not hidden and have an ID that is referenced
     * by another element via a WAI-ARIA property.
     */
    // TODO: Compute refering ID.
    // results.push(true);
    return results.includes(true);
}
function hasDisplayNodeOrVisibilityHidden(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el) {
    const style = el.getAttribute('style');
    if (!style) {
        return false;
    }
    // TODO: Improve accuracy
    return /display\s*:\s*none|visibility\s*:\s*hidden/gi.test(style);
}
function isExposedElement(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs) {
    var _a;
    const svgRenderedConditions = (_a = specs.def['#contentModels']['#SVGRenderable']) === null || _a === void 0 ? void 0 : _a.join(',');
    if (svgRenderedConditions && el.matches(svgRenderedConditions)) {
        return true;
    }
    return isNotMetaOrHiddenHTMLElement(el, specs);
}
function isNotMetaOrHiddenHTMLElement(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs) {
    var _a;
    const metadataConditions = (_a = specs.def['#contentModels']['#metadata']) === null || _a === void 0 ? void 0 : _a.join(',');
    if (metadataConditions && el.matches(metadataConditions)) {
        return false;
    }
    return !el.matches('input[type=hidden i]');
}
