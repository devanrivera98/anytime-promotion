"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRequiredOwnedElement = exports.hasRequiredOwnedElement = void 0;
const is_presentational_1 = require("../specs/is-presentational");
const get_computed_role_1 = require("./get-computed-role");
const get_explicit_role_1 = require("./get-explicit-role");
const get_implicit_role_1 = require("./get-implicit-role");
function hasRequiredOwnedElement(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs, version) {
    /**
     * The element has aria-owns which means it may have owned elements.
     *
     * THIS CONDITION IS PARTIAL SUPPORT.
     */
    if (el.hasAttribute('aria-owns')) {
        // FIXME
        return true;
    }
    /**
     * Otherwise, traverses descendants to find owned elements.
     */
    const computed = (0, get_computed_role_1.getComputedRole)(specs, el, version);
    if (!computed.role || computed.role.requiredOwnedElements.length === 0) {
        return true;
    }
    for (const expectRole of computed.role.requiredOwnedElements) {
        for (const owned of getClosestNonPresentationalDescendants(el, specs, version)) {
            if (isRequiredOwnedElement(owned.el, owned.role, expectRole, specs, version)) {
                return true;
            }
        }
    }
    return false;
}
exports.hasRequiredOwnedElement = hasRequiredOwnedElement;
function isRequiredOwnedElement(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, role, query, specs, version) {
    var _a;
    const [baseRole, owningRole] = query.split(' > ');
    if ((role === null || role === void 0 ? void 0 : role.name) !== baseRole) {
        return false;
    }
    if (!owningRole) {
        return true;
    }
    for (const owning of getClosestNonPresentationalDescendants(el, specs, version)) {
        if (((_a = owning.role) === null || _a === void 0 ? void 0 : _a.name) === owningRole) {
            return true;
        }
    }
    return false;
}
exports.isRequiredOwnedElement = isRequiredOwnedElement;
/**
 * Gets the list of closest non-presentational descendants.
 * âš  THE SPECIFICATION HAS AN ISSUE
 * that has not decided whether the owned element is a child or a descendant.
 *
 * @see https://github.com/w3c/aria/issues/1033
 * @see https://github.com/w3c/aria/issues/748
 * @see https://github.com/w3c/aria/pull/1162
 * @see https://github.com/w3c/aria/pull/1213
 *
 * Currently, this process interprets that as A CHILD
 * because it wants to be near to HTML semantics.
 * However, the presentational role behaves transparently
 * according to the sample code in WAI-ARIA specification.
 */
function getClosestNonPresentationalDescendants(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, specs, version) {
    var _a;
    const owned = [];
    for (const child of Array.from(el.children)) {
        const implicitRole = (0, get_implicit_role_1.getImplicitRole)(specs, child, version);
        const explicitRole = (0, get_explicit_role_1.getExplicitRole)(specs, child, version);
        const computed = explicitRole.role ? explicitRole : implicitRole;
        if ((0, is_presentational_1.isPresentational)((_a = computed.role) === null || _a === void 0 ? void 0 : _a.name)) {
            owned.push(...getClosestNonPresentationalDescendants(child, specs, version));
            continue;
        }
        owned.push({ ...computed, el: child });
    }
    return owned;
}
